
Core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ptr_table    00000000  08039000  08039000  000291a8  2**0
                  CONTENTS
  3 .code_section_1 000000f0  08019000  08019000  00029000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .code_section_2 000000b8  080190f0  080190f0  000290f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       0000010c  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08004ac8  08004ac8  000291a8  2**0
                  CONTENTS
  7 .ARM          00000008  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08004ad0  08004ad0  000291a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000170  20000000  08004ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000001c4  20000170  08004c48  00020170  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20000334  08004c48  00020334  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000291a8  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000cebc  00000000  00000000  000291d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001f9d  00000000  00000000  00036094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000a00  00000000  00000000  00038038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000928  00000000  00000000  00038a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025b25  00000000  00000000  00039360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000cedb  00000000  00000000  0005ee85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e7c5a  00000000  00000000  0006bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001539ba  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00002b28  00000000  00000000  00153a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049a4 	.word	0x080049a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	080049a4 	.word	0x080049a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0xc4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <MX_GPIO_Init+0xc4>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_GPIO_Init+0xc4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 fe57 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <MX_GPIO_Init+0xc8>)
 800060e:	f000 fc9f 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000612:	2320      	movs	r3, #32
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f000 fc90 	bl	8000f50 <HAL_GPIO_Init>

}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fa76 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f8ac 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f7ff ff90 	bl	8000574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f9b2 	bl	80009bc <MX_USART2_UART_Init>

  uint8_t tx_buff[1024];
  uint8_t len;

  // Entry
  len = snprintf((char*)&tx_buff,1024," < ==================== Entry point ==================== > \r\n");
 8000658:	463b      	mov	r3, r7
 800065a:	4a46      	ldr	r2, [pc, #280]	; (8000774 <main+0x134>)
 800065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fd2b 	bl	80040bc <sniprintf>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  HAL_UART_Transmit(&huart2, (uint8_t *)&tx_buff, len, 10);
 800066c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000670:	b29a      	uxth	r2, r3
 8000672:	4639      	mov	r1, r7
 8000674:	230a      	movs	r3, #10
 8000676:	4840      	ldr	r0, [pc, #256]	; (8000778 <main+0x138>)
 8000678:	f002 f9b4 	bl	80029e4 <HAL_UART_Transmit>

  // Setup terminal
  rx_byte_count = 0;
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <main+0x13c>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(HUART_HANDLE, &rx_buff[rx_byte_count], 1);
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <main+0x13c>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <main+0x140>)
 800068a:	4413      	add	r3, r2
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	4839      	ldr	r0, [pc, #228]	; (8000778 <main+0x138>)
 8000692:	f002 fa3b 	bl	8002b0c <HAL_UART_Receive_IT>

  len = snprintf((char*)&tx_buff,UART_BUFF_LEN,"\r\n\n$ ");
 8000696:	463b      	mov	r3, r7
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <main+0x144>)
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fd0c 	bl	80040bc <sniprintf>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  HAL_UART_Transmit(HUART_HANDLE, (uint8_t *)&tx_buff, rx_byte_count+len, 10);
 80006aa:	4b34      	ldr	r3, [pc, #208]	; (800077c <main+0x13c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4639      	mov	r1, r7
 80006bc:	230a      	movs	r3, #10
 80006be:	482e      	ldr	r0, [pc, #184]	; (8000778 <main+0x138>)
 80006c0:	f002 f990 	bl	80029e4 <HAL_UART_Transmit>

  // Partial reconfig code
  void (*real_functoin_1)(uint32_t) = &uart_interupt_service;
 80006c4:	4b30      	ldr	r3, [pc, #192]	; (8000788 <main+0x148>)
 80006c6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  void (*real_functoin_2)(uint32_t) = &handle_stop_char;
 80006ca:	4b30      	ldr	r3, [pc, #192]	; (800078c <main+0x14c>)
 80006cc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

  functoin_1 = &lut_func_ptr_1+1;
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <main+0x150>)
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <main+0x154>)
 80006d6:	601a      	str	r2, [r3, #0]
  functoin_2 = &lut_func_ptr_2+1;
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <main+0x158>)
 80006da:	461a      	mov	r2, r3
 80006dc:	4b2f      	ldr	r3, [pc, #188]	; (800079c <main+0x15c>)
 80006de:	601a      	str	r2, [r3, #0]

  if(functoin_1!=real_functoin_1){
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <main+0x154>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d012      	beq.n	8000712 <main+0xd2>
	  uint8_t len = snprintf((char*)&tx_buff,1024,"INCORRECT FUNC 1 PTR!!!\r\n");
 80006ec:	463b      	mov	r3, r7
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <main+0x160>)
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fce1 	bl	80040bc <sniprintf>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 3401 	strb.w	r3, [r7, #1025]	; 0x401
	  while(1){
		  HAL_UART_Transmit(&huart2, (uint8_t *)&tx_buff, len, 10);
 8000700:	f897 3401 	ldrb.w	r3, [r7, #1025]	; 0x401
 8000704:	b29a      	uxth	r2, r3
 8000706:	4639      	mov	r1, r7
 8000708:	230a      	movs	r3, #10
 800070a:	481b      	ldr	r0, [pc, #108]	; (8000778 <main+0x138>)
 800070c:	f002 f96a 	bl	80029e4 <HAL_UART_Transmit>
 8000710:	e7f6      	b.n	8000700 <main+0xc0>
	  }
  }
  if(functoin_2!=real_functoin_2){
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0x15c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800071a:	429a      	cmp	r2, r3
 800071c:	d012      	beq.n	8000744 <main+0x104>
	  uint8_t len = snprintf((char*)&tx_buff,1024,"INCORRECT FUNC 2 PTR!!!\r\n");
 800071e:	463b      	mov	r3, r7
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <main+0x164>)
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fcc8 	bl	80040bc <sniprintf>
 800072c:	4603      	mov	r3, r0
 800072e:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
	  while(1){
		  HAL_UART_Transmit(&huart2, (uint8_t *)&tx_buff, len, 10);
 8000732:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000736:	b29a      	uxth	r2, r3
 8000738:	4639      	mov	r1, r7
 800073a:	230a      	movs	r3, #10
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <main+0x138>)
 800073e:	f002 f951 	bl	80029e4 <HAL_UART_Transmit>
 8000742:	e7f6      	b.n	8000732 <main+0xf2>
	  }
  }

  functoin_1(500);
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <main+0x154>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074c:	4798      	blx	r3
  functoin_2(500);
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <main+0x15c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000756:	4798      	blx	r3

//  some_operation(500);
//  another_operation(200);

  uint32_t tick = HAL_GetTick();
 8000758:	f000 fa5e 	bl	8000c18 <HAL_GetTick>
 800075c:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
  uint32_t data = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  bool rval = handle_stop_char();
 8000766:	f018 fcc3 	bl	80190f0 <handle_stop_char>
 800076a:	4603      	mov	r3, r0
 800076c:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
  {
 8000770:	e7f9      	b.n	8000766 <main+0x126>
 8000772:	bf00      	nop
 8000774:	080049d4 	.word	0x080049d4
 8000778:	2000029c 	.word	0x2000029c
 800077c:	20000294 	.word	0x20000294
 8000780:	20000194 	.word	0x20000194
 8000784:	080049cc 	.word	0x080049cc
 8000788:	08019001 	.word	0x08019001
 800078c:	080190f1 	.word	0x080190f1
 8000790:	08019001 	.word	0x08019001
 8000794:	2000018c 	.word	0x2000018c
 8000798:	080190f1 	.word	0x080190f1
 800079c:	20000190 	.word	0x20000190
 80007a0:	08004a14 	.word	0x08004a14
 80007a4:	08004a30 	.word	0x08004a30

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	; 0x58
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2244      	movs	r2, #68	; 0x44
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fc78 	bl	80040ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ce:	f000 fda9 	bl	8001324 <HAL_PWREx_ControlVoltageScaling>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007d8:	f000 f84a 	bl	8000870 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2310      	movs	r3, #16
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ee:	2302      	movs	r3, #2
 80007f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007fa:	2307      	movs	r3, #7
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fde0 	bl	80013d0 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000816:	f000 f82b 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f9a8 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800083e:	f000 f817 	bl	8000870 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3758      	adds	r7, #88	; 0x58
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_UART_RxCpltCallback+0x20>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d101      	bne.n	8000862 <HAL_UART_RxCpltCallback+0x16>
		uart_interupt_service();
 800085e:	f018 fbcf 	bl	8019000 <uart_interupt_service>
	}
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40004400 	.word	0x40004400

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	; 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f96e 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f002 f94b 	bl	8002bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000029c 	.word	0x2000029c

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f003 fb6e 	bl	800403c <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20018000 	.word	0x20018000
 800098c:	00000400 	.word	0x00000400
 8000990:	20000298 	.word	0x20000298
 8000994:	20000338 	.word	0x20000338

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_USART2_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 8000a00:	f001 ffa2 	bl	8002948 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f7ff ff31 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000029c 	.word	0x2000029c
 8000a18:	40004400 	.word	0x40004400

08000a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0ac      	sub	sp, #176	; 0xb0
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2288      	movs	r2, #136	; 0x88
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fb35 	bl	80040ac <memset>
  if(uartHandle->Instance==USART2)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <HAL_UART_MspInit+0xc0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d143      	bne.n	8000ad4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fab9 	bl	8001fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a64:	f7ff ff04 	bl	8000870 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_UART_MspInit+0xc4>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0xc4>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a72:	6593      	str	r3, [r2, #88]	; 0x58
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_UART_MspInit+0xc4>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0xc4>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0xc4>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0xc4>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f000 fa46 	bl	8000f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2026      	movs	r0, #38	; 0x26
 8000aca:	f000 f98c 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ace:	2026      	movs	r0, #38	; 0x26
 8000ad0:	f000 f9a5 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	37b0      	adds	r7, #176	; 0xb0
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ff56 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f003 fa99 	bl	8004048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fd93 	bl	8000640 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000b28:	08004ad8 	.word	0x08004ad8
  ldr r2, =_sbss
 8000b2c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000b30:	20000334 	.word	0x20000334

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_Init+0x3c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_Init+0x3c>)
 8000b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 f93e 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f80f 	bl	8000b78 <HAL_InitTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	e001      	b.n	8000b6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b66:	f7ff fe89 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d023      	beq.n	8000bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_InitTick+0x70>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f949 	bl	8000e3a <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d809      	bhi.n	8000bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f913 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e001      	b.n	8000bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000108 	.word	0x20000108
 8000be8:	20000100 	.word	0x20000100
 8000bec:	20000104 	.word	0x20000104

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000108 	.word	0x20000108
 8000c14:	20000320 	.word	0x20000320

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000320 	.word	0x20000320

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff3e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff31 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b085      	sub	sp, #20
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d008      	beq.n	8000e7c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e022      	b.n	8000ec2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 020e 	bic.w	r2, r2, #14
 8000e8a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0201 	bic.w	r2, r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f003 021c 	and.w	r2, r3, #28
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d005      	beq.n	8000ef2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2204      	movs	r2, #4
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e029      	b.n	8000f46 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 020e 	bic.w	r2, r2, #14
 8000f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0201 	bic.w	r2, r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 021c 	and.w	r2, r3, #28
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	4798      	blx	r3
    }
  }
  return status;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e17f      	b.n	8001260 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8171 	beq.w	800125a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d005      	beq.n	8000f90 <HAL_GPIO_Init+0x40>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d130      	bne.n	8000ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	f003 0201 	and.w	r2, r3, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d118      	bne.n	8001030 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001004:	2201      	movs	r2, #1
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	f003 0201 	and.w	r2, r3, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b03      	cmp	r3, #3
 800103a:	d017      	beq.n	800106c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d123      	bne.n	80010c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	6939      	ldr	r1, [r7, #16]
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0203 	and.w	r2, r3, #3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80ac 	beq.w	800125a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b5f      	ldr	r3, [pc, #380]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	4a5e      	ldr	r2, [pc, #376]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6613      	str	r3, [r2, #96]	; 0x60
 800110e:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <HAL_GPIO_Init+0x330>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800111a:	4a5a      	ldr	r2, [pc, #360]	; (8001284 <HAL_GPIO_Init+0x334>)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x242>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4f      	ldr	r2, [pc, #316]	; (8001288 <HAL_GPIO_Init+0x338>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x23e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4e      	ldr	r2, [pc, #312]	; (800128c <HAL_GPIO_Init+0x33c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x23a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4d      	ldr	r2, [pc, #308]	; (8001290 <HAL_GPIO_Init+0x340>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x236>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <HAL_GPIO_Init+0x344>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x232>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4b      	ldr	r2, [pc, #300]	; (8001298 <HAL_GPIO_Init+0x348>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x22e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4a      	ldr	r2, [pc, #296]	; (800129c <HAL_GPIO_Init+0x34c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x22a>
 8001176:	2306      	movs	r3, #6
 8001178:	e00c      	b.n	8001194 <HAL_GPIO_Init+0x244>
 800117a:	2307      	movs	r3, #7
 800117c:	e00a      	b.n	8001194 <HAL_GPIO_Init+0x244>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x244>
 8001182:	2304      	movs	r3, #4
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x244>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x244>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x244>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x244>
 8001192:	2300      	movs	r3, #0
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a4:	4937      	ldr	r1, [pc, #220]	; (8001284 <HAL_GPIO_Init+0x334>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_GPIO_Init+0x350>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d6:	4a32      	ldr	r2, [pc, #200]	; (80012a0 <HAL_GPIO_Init+0x350>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <HAL_GPIO_Init+0x350>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <HAL_GPIO_Init+0x350>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x350>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800122a:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <HAL_GPIO_Init+0x350>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_GPIO_Init+0x350>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <HAL_GPIO_Init+0x350>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	f47f ae78 	bne.w	8000f60 <HAL_GPIO_Init+0x10>
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48001000 	.word	0x48001000
 8001298:	48001400 	.word	0x48001400
 800129c:	48001800 	.word	0x48001800
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43d9      	mvns	r1, r3
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	400b      	ands	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_PWREx_GetVoltageRange+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40007000 	.word	0x40007000

08001324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001332:	d130      	bne.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800133c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001340:	d038      	beq.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2232      	movs	r2, #50	; 0x32
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001368:	e002      	b.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b01      	subs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137c:	d102      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f2      	bne.n	800136a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001390:	d110      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e00f      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a2:	d007      	beq.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000
 80013c8:	20000100 	.word	0x20000100
 80013cc:	431bde83 	.word	0x431bde83

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e3ca      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e2:	4b97      	ldr	r3, [pc, #604]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ec:	4b94      	ldr	r3, [pc, #592]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 80e4 	beq.w	80015cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_RCC_OscConfig+0x4a>
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	f040 808b 	bne.w	8001528 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b01      	cmp	r3, #1
 8001416:	f040 8087 	bne.w	8001528 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141a:	4b89      	ldr	r3, [pc, #548]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x62>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e3a2      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1a      	ldr	r2, [r3, #32]
 8001436:	4b82      	ldr	r3, [pc, #520]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_RCC_OscConfig+0x7c>
 8001442:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800144a:	e005      	b.n	8001458 <HAL_RCC_OscConfig+0x88>
 800144c:	4b7c      	ldr	r3, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800144e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001458:	4293      	cmp	r3, r2
 800145a:	d223      	bcs.n	80014a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fd55 	bl	8001f10 <RCC_SetFlashLatencyFromMSIRange>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e383      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001470:	4b73      	ldr	r3, [pc, #460]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a72      	ldr	r2, [pc, #456]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	496d      	ldr	r1, [pc, #436]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148e:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	4968      	ldr	r1, [pc, #416]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
 80014a2:	e025      	b.n	80014f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a4:	4b66      	ldr	r3, [pc, #408]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a65      	ldr	r2, [pc, #404]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b63      	ldr	r3, [pc, #396]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4960      	ldr	r1, [pc, #384]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	495b      	ldr	r1, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fd15 	bl	8001f10 <RCC_SetFlashLatencyFromMSIRange>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e343      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014f0:	f000 fc4a 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b52      	ldr	r3, [pc, #328]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	4950      	ldr	r1, [pc, #320]	; (8001644 <HAL_RCC_OscConfig+0x274>)
 8001502:	5ccb      	ldrb	r3, [r1, r3]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	4a4e      	ldr	r2, [pc, #312]	; (8001648 <HAL_RCC_OscConfig+0x278>)
 800150e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001510:	4b4e      	ldr	r3, [pc, #312]	; (800164c <HAL_RCC_OscConfig+0x27c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fb2f 	bl	8000b78 <HAL_InitTick>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d052      	beq.n	80015ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	e327      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d032      	beq.n	8001596 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a42      	ldr	r2, [pc, #264]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb6c 	bl	8000c18 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001544:	f7ff fb68 	bl	8000c18 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e310      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a36      	ldr	r2, [pc, #216]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4931      	ldr	r1, [pc, #196]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	492c      	ldr	r1, [pc, #176]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e01a      	b.n	80015cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb39 	bl	8000c18 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb35 	bl	8000c18 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e2dd      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x1da>
 80015c8:	e000      	b.n	80015cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d074      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x21a>
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d10e      	bne.n	8001602 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d10b      	bne.n	8001602 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d064      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d160      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e2ba      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x24a>
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e026      	b.n	8001668 <HAL_RCC_OscConfig+0x298>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001622:	d115      	bne.n	8001650 <HAL_RCC_OscConfig+0x280>
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 800162a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a02      	ldr	r2, [pc, #8]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x298>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	08004a4c 	.word	0x08004a4c
 8001648:	20000100 	.word	0x20000100
 800164c:	20000104 	.word	0x20000104
 8001650:	4ba0      	ldr	r3, [pc, #640]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a9f      	ldr	r2, [pc, #636]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b9d      	ldr	r3, [pc, #628]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a9c      	ldr	r2, [pc, #624]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fad2 	bl	8000c18 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff face 	bl	8000c18 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e276      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168a:	4b92      	ldr	r3, [pc, #584]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x2a8>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fabe 	bl	8000c18 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff faba 	bl	8000c18 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e262      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b2:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2d0>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d060      	beq.n	8001790 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x310>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d119      	bne.n	800170e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d116      	bne.n	800170e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	4b7c      	ldr	r3, [pc, #496]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_OscConfig+0x328>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e23f      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	4973      	ldr	r1, [pc, #460]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170c:	e040      	b.n	8001790 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d023      	beq.n	800175e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001716:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6e      	ldr	r2, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fa79 	bl	8000c18 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fa75 	bl	8000c18 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e21d      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173c:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	495f      	ldr	r1, [pc, #380]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e018      	b.n	8001790 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a5c      	ldr	r2, [pc, #368]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fa55 	bl	8000c18 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fa51 	bl	8000c18 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1f9      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d03c      	beq.n	8001816 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01c      	beq.n	80017de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa30 	bl	8000c18 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa2c 	bl	8000c18 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1d4      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ef      	beq.n	80017bc <HAL_RCC_OscConfig+0x3ec>
 80017dc:	e01b      	b.n	8001816 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa13 	bl	8000c18 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fa0f 	bl	8000c18 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1b7      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ef      	bne.n	80017f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80a6 	beq.w	8001970 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10d      	bne.n	8001850 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	; 0x58
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184c:	2301      	movs	r3, #1
 800184e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_RCC_OscConfig+0x508>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d118      	bne.n	800188e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_RCC_OscConfig+0x508>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_RCC_OscConfig+0x508>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001868:	f7ff f9d6 	bl	8000c18 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff f9d2 	bl	8000c18 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e17a      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_RCC_OscConfig+0x508>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4d8>
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a6:	e029      	b.n	80018fc <HAL_RCC_OscConfig+0x52c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d115      	bne.n	80018dc <HAL_RCC_OscConfig+0x50c>
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_RCC_OscConfig+0x504>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	e014      	b.n	80018fc <HAL_RCC_OscConfig+0x52c>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40007000 	.word	0x40007000
 80018dc:	4b9c      	ldr	r3, [pc, #624]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	4a9b      	ldr	r2, [pc, #620]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ec:	4b98      	ldr	r3, [pc, #608]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 80018ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f2:	4a97      	ldr	r2, [pc, #604]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d016      	beq.n	8001932 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff f988 	bl	8000c18 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff f984 	bl	8000c18 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e12a      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001922:	4b8b      	ldr	r3, [pc, #556]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ed      	beq.n	800190c <HAL_RCC_OscConfig+0x53c>
 8001930:	e015      	b.n	800195e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f7ff f971 	bl	8000c18 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff f96d 	bl	8000c18 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e113      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001950:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ed      	bne.n	800193a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b7a      	ldr	r3, [pc, #488]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4a79      	ldr	r2, [pc, #484]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80fe 	beq.w	8001b76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	2b02      	cmp	r3, #2
 8001980:	f040 80d0 	bne.w	8001b24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001984:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	429a      	cmp	r2, r3
 8001996:	d130      	bne.n	80019fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	3b01      	subs	r3, #1
 80019a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d127      	bne.n	80019fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d11f      	bne.n	80019fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019c4:	2a07      	cmp	r2, #7
 80019c6:	bf14      	ite	ne
 80019c8:	2201      	movne	r2, #1
 80019ca:	2200      	moveq	r2, #0
 80019cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d113      	bne.n	80019fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	3b01      	subs	r3, #1
 80019e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	3b01      	subs	r3, #1
 80019f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d06e      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d069      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0ad      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a28:	f7ff f8f6 	bl	8000c18 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f8f2 	bl	8000c18 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e09a      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <HAL_RCC_OscConfig+0x784>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a68:	0212      	lsls	r2, r2, #8
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a70:	0852      	lsrs	r2, r2, #1
 8001a72:	3a01      	subs	r2, #1
 8001a74:	0552      	lsls	r2, r2, #21
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a7c:	0852      	lsrs	r2, r2, #1
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	0652      	lsls	r2, r2, #25
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a88:	0912      	lsrs	r2, r2, #4
 8001a8a:	0452      	lsls	r2, r2, #17
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	4930      	ldr	r1, [pc, #192]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2d      	ldr	r2, [pc, #180]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4a2a      	ldr	r2, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aac:	f7ff f8b4 	bl	8000c18 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f8b0 	bl	8000c18 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e058      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad2:	e050      	b.n	8001b76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e04f      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d148      	bne.n	8001b76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001afc:	f7ff f88c 	bl	8000c18 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f888 	bl	8000c18 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e030      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x734>
 8001b22:	e028      	b.n	8001b76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d023      	beq.n	8001b72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f86f 	bl	8000c18 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	e00c      	b.n	8001b58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff f86b 	bl	8000c18 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d905      	bls.n	8001b58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e013      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_OscConfig+0x7b0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1ec      	bne.n	8001b3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_OscConfig+0x7b0>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4905      	ldr	r1, [pc, #20]	; (8001b80 <HAL_RCC_OscConfig+0x7b0>)
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_OscConfig+0x7b4>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
 8001b70:	e001      	b.n	8001b76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	feeefffc 	.word	0xfeeefffc

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0e7      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b75      	ldr	r3, [pc, #468]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d910      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 0207 	bic.w	r2, r3, #7
 8001bb2:	4970      	ldr	r1, [pc, #448]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0cf      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d010      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d908      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4960      	ldr	r1, [pc, #384]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d04c      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d121      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0a6      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d115      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e09a      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e08e      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e086      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4943      	ldr	r1, [pc, #268]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c70:	f7fe ffd2 	bl	8000c18 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7fe ffce 	bl	8000c18 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e06e      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d208      	bcs.n	8001cce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	492b      	ldr	r1, [pc, #172]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d210      	bcs.n	8001cfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 0207 	bic.w	r2, r3, #7
 8001ce4:	4923      	ldr	r1, [pc, #140]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_RCC_ClockConfig+0x1ec>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e036      	b.n	8001d6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4918      	ldr	r1, [pc, #96]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4910      	ldr	r1, [pc, #64]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d3c:	f000 f824 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	490b      	ldr	r1, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1f4>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1fc>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe ff09 	bl	8000b78 <HAL_InitTick>
 8001d66:	4603      	mov	r3, r0
 8001d68:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08004a4c 	.word	0x08004a4c
 8001d80:	20000100 	.word	0x20000100
 8001d84:	20000104 	.word	0x20000104

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x34>
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d121      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d11e      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dbc:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dc8:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e005      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001de4:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10d      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	e004      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d134      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d003      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0xac>
 8001e2c:	e005      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e30:	617b      	str	r3, [r7, #20]
      break;
 8001e32:	e005      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e36:	617b      	str	r3, [r7, #20]
      break;
 8001e38:	e002      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	617b      	str	r3, [r7, #20]
      break;
 8001e3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	0e5b      	lsrs	r3, r3, #25
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	3301      	adds	r3, #1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e80:	69bb      	ldr	r3, [r7, #24]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08004a64 	.word	0x08004a64
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000100 	.word	0x20000100

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08004a5c 	.word	0x08004a5c

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee8:	f7ff ffda 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0adb      	lsrs	r3, r3, #11
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4904      	ldr	r1, [pc, #16]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08004a5c 	.word	0x08004a5c

08001f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f28:	f7ff f9ee 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 8001f2c:	6178      	str	r0, [r7, #20]
 8001f2e:	e014      	b.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f48:	f7ff f9de 	bl	8001308 <HAL_PWREx_GetVoltageRange>
 8001f4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f60:	d10b      	bne.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d919      	bls.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f6c:	d902      	bls.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6e:	2302      	movs	r3, #2
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e013      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e010      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d902      	bls.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f80:	2303      	movs	r3, #3
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e00a      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d102      	bne.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e004      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b70      	cmp	r3, #112	; 0x70
 8001f96:	d101      	bne.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f98:	2301      	movs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 0207 	bic.w	r2, r3, #7
 8001fa4:	4909      	ldr	r1, [pc, #36]	; (8001fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fdc:	2300      	movs	r3, #0
 8001fde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d041      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ff4:	d02a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ff6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ffa:	d824      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002000:	d008      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002002:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002006:	d81e      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800200c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002010:	d010      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002012:	e018      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002014:	4b86      	ldr	r3, [pc, #536]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a85      	ldr	r2, [pc, #532]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002020:	e015      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fabb 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002032:	e00c      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3320      	adds	r3, #32
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fba6 	bl	800278c <RCCEx_PLLSAI2_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002044:	e003      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	74fb      	strb	r3, [r7, #19]
      break;
 800204a:	e000      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800204c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002054:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002062:	4973      	ldr	r1, [pc, #460]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800206a:	e001      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d041      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002080:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002084:	d02a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002086:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800208a:	d824      	bhi.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800208c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002090:	d008      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002096:	d81e      	bhi.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d010      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020a2:	e018      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020a4:	4b62      	ldr	r3, [pc, #392]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a61      	ldr	r2, [pc, #388]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b0:	e015      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fa73 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c2:	e00c      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3320      	adds	r3, #32
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fb5e 	bl	800278c <RCCEx_PLLSAI2_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d4:	e003      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	74fb      	strb	r3, [r7, #19]
      break;
 80020da:	e000      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020e4:	4b52      	ldr	r3, [pc, #328]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f2:	494f      	ldr	r1, [pc, #316]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020fa:	e001      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a0 	beq.w	800224e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002122:	2300      	movs	r3, #0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b41      	ldr	r3, [pc, #260]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	4a40      	ldr	r2, [pc, #256]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	6593      	str	r3, [r2, #88]	; 0x58
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002150:	f7fe fd62 	bl	8000c18 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002156:	e009      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7fe fd5e 	bl	8000c18 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d902      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	74fb      	strb	r3, [r7, #19]
        break;
 800216a:	e005      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ef      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d15c      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002188:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01f      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	d019      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	4a20      	ldr	r2, [pc, #128]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7fe fd1d 	bl	8000c18 <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	e00b      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fd19 	bl	8000c18 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d902      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	74fb      	strb	r3, [r7, #19]
            break;
 80021f8:	e006      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ec      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221e:	4904      	ldr	r1, [pc, #16]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002226:	e009      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	74bb      	strb	r3, [r7, #18]
 800222c:	e006      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223c:	7c7b      	ldrb	r3, [r7, #17]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b9e      	ldr	r3, [pc, #632]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	4a9d      	ldr	r2, [pc, #628]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225a:	4b98      	ldr	r3, [pc, #608]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f023 0203 	bic.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	4994      	ldr	r1, [pc, #592]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800227c:	4b8f      	ldr	r3, [pc, #572]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f023 020c 	bic.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	498c      	ldr	r1, [pc, #560]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229e:	4b87      	ldr	r3, [pc, #540]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	4983      	ldr	r1, [pc, #524]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022c0:	4b7e      	ldr	r3, [pc, #504]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	497b      	ldr	r1, [pc, #492]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	4972      	ldr	r1, [pc, #456]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002304:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	496a      	ldr	r1, [pc, #424]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	4961      	ldr	r1, [pc, #388]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002348:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4959      	ldr	r1, [pc, #356]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236a:	4b54      	ldr	r3, [pc, #336]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002378:	4950      	ldr	r1, [pc, #320]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238c:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	4948      	ldr	r1, [pc, #288]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	493f      	ldr	r1, [pc, #252]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d028      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d0:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ee:	d106      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fa:	60d3      	str	r3, [r2, #12]
 80023fc:	e011      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002406:	d10c      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	2101      	movs	r1, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f8c8 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d028      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	491f      	ldr	r1, [pc, #124]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244c:	d106      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002458:	60d3      	str	r3, [r2, #12]
 800245a:	e011      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002464:	d10c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2101      	movs	r1, #1
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f899 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02b      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024aa:	d109      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a02      	ldr	r2, [pc, #8]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b6:	60d3      	str	r3, [r2, #12]
 80024b8:	e014      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2101      	movs	r1, #1
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f867 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02f      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fe:	4928      	ldr	r1, [pc, #160]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800250e:	d10d      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	2102      	movs	r1, #2
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f844 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d014      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	74bb      	strb	r3, [r7, #18]
 800252a:	e011      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002534:	d10c      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3320      	adds	r3, #32
 800253a:	2102      	movs	r1, #2
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f925 	bl	800278c <RCCEx_PLLSAI2_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800256a:	490d      	ldr	r1, [pc, #52]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800258e:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002596:	7cbb      	ldrb	r3, [r7, #18]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025b2:	4b75      	ldr	r3, [pc, #468]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d018      	beq.n	80025f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025be:	4b72      	ldr	r3, [pc, #456]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0203 	and.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d10d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
       ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025d6:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
       ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d047      	beq.n	800267a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e044      	b.n	800267a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d018      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x86>
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d825      	bhi.n	8002648 <RCCEx_PLLSAI1_Config+0xa4>
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d002      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x62>
 8002600:	2b02      	cmp	r3, #2
 8002602:	d009      	beq.n	8002618 <RCCEx_PLLSAI1_Config+0x74>
 8002604:	e020      	b.n	8002648 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d11d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002616:	e01a      	b.n	800264e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002618:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002628:	e013      	b.n	8002652 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800262a:	4b57      	ldr	r3, [pc, #348]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10f      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002646:	e006      	b.n	8002656 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e004      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002656:	bf00      	nop
    }

    if(status == HAL_OK)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800265e:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	430b      	orrs	r3, r1
 8002674:	4944      	ldr	r1, [pc, #272]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d17d      	bne.n	800277c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a40      	ldr	r2, [pc, #256]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800268a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe fac4 	bl	8000c18 <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002692:	e009      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002694:	f7fe fac0 	bl	8000c18 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d902      	bls.n	80026a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	73fb      	strb	r3, [r7, #15]
        break;
 80026a6:	e005      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ef      	bne.n	8002694 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d160      	bne.n	800277c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d111      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6892      	ldr	r2, [r2, #8]
 80026d0:	0211      	lsls	r1, r2, #8
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68d2      	ldr	r2, [r2, #12]
 80026d6:	0912      	lsrs	r2, r2, #4
 80026d8:	0452      	lsls	r2, r2, #17
 80026da:	430a      	orrs	r2, r1
 80026dc:	492a      	ldr	r1, [pc, #168]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	610b      	str	r3, [r1, #16]
 80026e2:	e027      	b.n	8002734 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d112      	bne.n	8002710 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6892      	ldr	r2, [r2, #8]
 80026fa:	0211      	lsls	r1, r2, #8
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6912      	ldr	r2, [r2, #16]
 8002700:	0852      	lsrs	r2, r2, #1
 8002702:	3a01      	subs	r2, #1
 8002704:	0552      	lsls	r2, r2, #21
 8002706:	430a      	orrs	r2, r1
 8002708:	491f      	ldr	r1, [pc, #124]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	610b      	str	r3, [r1, #16]
 800270e:	e011      	b.n	8002734 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002718:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	0211      	lsls	r1, r2, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6952      	ldr	r2, [r2, #20]
 8002726:	0852      	lsrs	r2, r2, #1
 8002728:	3a01      	subs	r2, #1
 800272a:	0652      	lsls	r2, r2, #25
 800272c:	430a      	orrs	r2, r1
 800272e:	4916      	ldr	r1, [pc, #88]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fa6a 	bl	8000c18 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002746:	e009      	b.n	800275c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002748:	f7fe fa66 	bl	8000c18 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	73fb      	strb	r3, [r7, #15]
          break;
 800275a:	e005      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ef      	beq.n	8002748 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	4904      	ldr	r1, [pc, #16]	; (8002788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d018      	beq.n	80027d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0203 	and.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
       ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027be:	4b61      	ldr	r3, [pc, #388]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
       ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d047      	beq.n	8002862 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e044      	b.n	8002862 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d018      	beq.n	8002812 <RCCEx_PLLSAI2_Config+0x86>
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d825      	bhi.n	8002830 <RCCEx_PLLSAI2_Config+0xa4>
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d002      	beq.n	80027ee <RCCEx_PLLSAI2_Config+0x62>
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d009      	beq.n	8002800 <RCCEx_PLLSAI2_Config+0x74>
 80027ec:	e020      	b.n	8002830 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ee:	4b55      	ldr	r3, [pc, #340]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11d      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fe:	e01a      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002800:	4b50      	ldr	r3, [pc, #320]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002810:	e013      	b.n	800283a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281e:	4b49      	ldr	r3, [pc, #292]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800282e:	e006      	b.n	800283e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e004      	b.n	8002840 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800283e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002846:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	430b      	orrs	r3, r1
 800285c:	4939      	ldr	r1, [pc, #228]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d167      	bne.n	8002938 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a35      	ldr	r2, [pc, #212]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002874:	f7fe f9d0 	bl	8000c18 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800287a:	e009      	b.n	8002890 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800287c:	f7fe f9cc 	bl	8000c18 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	73fb      	strb	r3, [r7, #15]
        break;
 800288e:	e005      	b.n	800289c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ef      	bne.n	800287c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d14a      	bne.n	8002938 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6892      	ldr	r2, [r2, #8]
 80028b8:	0211      	lsls	r1, r2, #8
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	0912      	lsrs	r2, r2, #4
 80028c0:	0452      	lsls	r2, r2, #17
 80028c2:	430a      	orrs	r2, r1
 80028c4:	491f      	ldr	r1, [pc, #124]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	614b      	str	r3, [r1, #20]
 80028ca:	e011      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	0211      	lsls	r1, r2, #8
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6912      	ldr	r2, [r2, #16]
 80028e2:	0852      	lsrs	r2, r2, #1
 80028e4:	3a01      	subs	r2, #1
 80028e6:	0652      	lsls	r2, r2, #25
 80028e8:	430a      	orrs	r2, r1
 80028ea:	4916      	ldr	r1, [pc, #88]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe f98c 	bl	8000c18 <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002902:	e009      	b.n	8002918 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002904:	f7fe f988 	bl	8000c18 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	73fb      	strb	r3, [r7, #15]
          break;
 8002916:	e005      	b.n	8002924 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4904      	ldr	r1, [pc, #16]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002934:	4313      	orrs	r3, r2
 8002936:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e040      	b.n	80029dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe f856 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fc18 	bl	80031bc <UART_SetConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e022      	b.n	80029dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fec4 	bl	800372c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 ff4b 	bl	8003870 <UART_CheckIdleState>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 8082 	bne.w	8002b02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_UART_Transmit+0x26>
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e07a      	b.n	8002b04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_UART_Transmit+0x38>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e073      	b.n	8002b04 <HAL_UART_Transmit+0x120>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2221      	movs	r2, #33	; 0x21
 8002a30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a32:	f7fe f8f1 	bl	8000c18 <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x80>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a74:	e02d      	b.n	8002ad2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 ff3e 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e039      	b.n	8002b04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e008      	b.n	8002ac0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3301      	adds	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1cb      	bne.n	8002a76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2140      	movs	r1, #64	; 0x40
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 ff0a 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e005      	b.n	8002b04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d142      	bne.n	8002ba8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_UART_Receive_IT+0x22>
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e03b      	b.n	8002baa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_UART_Receive_IT+0x34>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e034      	b.n	8002baa <HAL_UART_Receive_IT+0x9e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_UART_Receive_IT+0xa8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d01f      	beq.n	8002b98 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	613b      	str	r3, [r7, #16]
   return(result);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	623b      	str	r3, [r7, #32]
 8002b86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	69f9      	ldr	r1, [r7, #28]
 8002b8a:	6a3a      	ldr	r2, [r7, #32]
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e6      	bne.n	8002b66 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 ff74 	bl	8003a8c <UART_Start_Receive_IT>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40008000 	.word	0x40008000

08002bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b0ba      	sub	sp, #232	; 0xe8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002be2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002be6:	4013      	ands	r3, r2
 8002be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d115      	bne.n	8002c20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00f      	beq.n	8002c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 82a6 	beq.w	8003162 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
      }
      return;
 8002c1e:	e2a0      	b.n	8003162 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8117 	beq.w	8002e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c3a:	4b85      	ldr	r3, [pc, #532]	; (8002e50 <HAL_UART_IRQHandler+0x298>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 810a 	beq.w	8002e58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d011      	beq.n	8002c74 <HAL_UART_IRQHandler+0xbc>
 8002c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d011      	beq.n	8002ca4 <HAL_UART_IRQHandler+0xec>
 8002c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2202      	movs	r2, #2
 8002c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d011      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x11c>
 8002cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cca:	f043 0202 	orr.w	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d06:	f043 0208 	orr.w	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <HAL_UART_IRQHandler+0x18a>
 8002d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 820c 	beq.w	8003166 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d005      	beq.n	8002d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d04f      	beq.n	8002e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 ff40 	bl	8003c20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d141      	bne.n	8002e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3308      	adds	r3, #8
 8002db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1d9      	bne.n	8002dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d013      	beq.n	8002e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <HAL_UART_IRQHandler+0x29c>)
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe f85d 	bl	8000ece <HAL_DMA_Abort_IT>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d017      	beq.n	8002e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e24:	4610      	mov	r0, r2
 8002e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	e00f      	b.n	8002e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f9b0 	bl	8003190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	e00b      	b.n	8002e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9ac 	bl	8003190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e38:	e007      	b.n	8002e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9a8 	bl	8003190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e48:	e18d      	b.n	8003166 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4a:	bf00      	nop
    return;
 8002e4c:	e18b      	b.n	8003166 <HAL_UART_IRQHandler+0x5ae>
 8002e4e:	bf00      	nop
 8002e50:	04000120 	.word	0x04000120
 8002e54:	08003ce7 	.word	0x08003ce7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f040 8146 	bne.w	80030ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 813f 	beq.w	80030ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8138 	beq.w	80030ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2210      	movs	r2, #16
 8002e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	f040 80b4 	bne.w	8002ffe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 815f 	beq.w	800316a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	f080 8157 	bcs.w	800316a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 8085 	bne.w	8002fe2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1da      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3308      	adds	r3, #8
 8002f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3308      	adds	r3, #8
 8002f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e1      	bne.n	8002f22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3308      	adds	r3, #8
 8002f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e3      	bne.n	8002f5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb2:	f023 0310 	bic.w	r3, r3, #16
 8002fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e4      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd ff38 	bl	8000e52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8d4 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffc:	e0b5      	b.n	800316a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800300a:	b29b      	uxth	r3, r3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80a7 	beq.w	800316e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a2 	beq.w	800316e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800303e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
 800304e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800305a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e4      	bne.n	800302a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3308      	adds	r3, #8
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	623b      	str	r3, [r7, #32]
   return(result);
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3308      	adds	r3, #8
 8003080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003084:	633a      	str	r2, [r7, #48]	; 0x30
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800308a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e3      	bne.n	8003060 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	69b9      	ldr	r1, [r7, #24]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	617b      	str	r3, [r7, #20]
   return(result);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e4      	bne.n	80030aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f85c 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030ec:	e03f      	b.n	800316e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00e      	beq.n	8003118 <HAL_UART_IRQHandler+0x560>
 80030fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800310e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 ff88 	bl	8004026 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003116:	e02d      	b.n	8003174 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01c      	beq.n	8003172 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
    }
    return;
 8003140:	e017      	b.n	8003172 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d012      	beq.n	8003174 <HAL_UART_IRQHandler+0x5bc>
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fdd9 	bl	8003d12 <UART_EndTransmit_IT>
    return;
 8003160:	e008      	b.n	8003174 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003162:	bf00      	nop
 8003164:	e006      	b.n	8003174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003166:	bf00      	nop
 8003168:	e004      	b.n	8003174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800316a:	bf00      	nop
 800316c:	e002      	b.n	8003174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003172:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003174:	37e8      	adds	r7, #232	; 0xe8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop

0800317c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c0:	b08a      	sub	sp, #40	; 0x28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4ba4      	ldr	r3, [pc, #656]	; (800347c <UART_SetConfig+0x2c0>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a99      	ldr	r2, [pc, #612]	; (8003480 <UART_SetConfig+0x2c4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	4313      	orrs	r3, r2
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	430a      	orrs	r2, r1
 800323a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a90      	ldr	r2, [pc, #576]	; (8003484 <UART_SetConfig+0x2c8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d126      	bne.n	8003294 <UART_SetConfig+0xd8>
 8003246:	4b90      	ldr	r3, [pc, #576]	; (8003488 <UART_SetConfig+0x2cc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b03      	cmp	r3, #3
 8003252:	d81b      	bhi.n	800328c <UART_SetConfig+0xd0>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0xa0>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	0800326d 	.word	0x0800326d
 8003260:	0800327d 	.word	0x0800327d
 8003264:	08003275 	.word	0x08003275
 8003268:	08003285 	.word	0x08003285
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003272:	e116      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003274:	2302      	movs	r3, #2
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327a:	e112      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800327c:	2304      	movs	r3, #4
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e10e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003284:	2308      	movs	r3, #8
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e10a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800328c:	2310      	movs	r3, #16
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e106      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a7c      	ldr	r2, [pc, #496]	; (800348c <UART_SetConfig+0x2d0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d138      	bne.n	8003310 <UART_SetConfig+0x154>
 800329e:	4b7a      	ldr	r3, [pc, #488]	; (8003488 <UART_SetConfig+0x2cc>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d82d      	bhi.n	8003308 <UART_SetConfig+0x14c>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0xf8>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	08003309 	.word	0x08003309
 80032bc:	08003309 	.word	0x08003309
 80032c0:	08003309 	.word	0x08003309
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003309 	.word	0x08003309
 80032cc:	08003309 	.word	0x08003309
 80032d0:	08003309 	.word	0x08003309
 80032d4:	080032f1 	.word	0x080032f1
 80032d8:	08003309 	.word	0x08003309
 80032dc:	08003309 	.word	0x08003309
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003301 	.word	0x08003301
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ee:	e0d8      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f6:	e0d4      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80032f8:	2304      	movs	r3, #4
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e0d0      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003300:	2308      	movs	r3, #8
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e0cc      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003308:	2310      	movs	r3, #16
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e0c8      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <UART_SetConfig+0x2d4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d125      	bne.n	8003366 <UART_SetConfig+0x1aa>
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <UART_SetConfig+0x2cc>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003324:	2b30      	cmp	r3, #48	; 0x30
 8003326:	d016      	beq.n	8003356 <UART_SetConfig+0x19a>
 8003328:	2b30      	cmp	r3, #48	; 0x30
 800332a:	d818      	bhi.n	800335e <UART_SetConfig+0x1a2>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d00a      	beq.n	8003346 <UART_SetConfig+0x18a>
 8003330:	2b20      	cmp	r3, #32
 8003332:	d814      	bhi.n	800335e <UART_SetConfig+0x1a2>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <UART_SetConfig+0x182>
 8003338:	2b10      	cmp	r3, #16
 800333a:	d008      	beq.n	800334e <UART_SetConfig+0x192>
 800333c:	e00f      	b.n	800335e <UART_SetConfig+0x1a2>
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003344:	e0ad      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003346:	2302      	movs	r3, #2
 8003348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334c:	e0a9      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800334e:	2304      	movs	r3, #4
 8003350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003354:	e0a5      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003356:	2308      	movs	r3, #8
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335c:	e0a1      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800335e:	2310      	movs	r3, #16
 8003360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003364:	e09d      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <UART_SetConfig+0x2d8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d125      	bne.n	80033bc <UART_SetConfig+0x200>
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <UART_SetConfig+0x2cc>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800337a:	2bc0      	cmp	r3, #192	; 0xc0
 800337c:	d016      	beq.n	80033ac <UART_SetConfig+0x1f0>
 800337e:	2bc0      	cmp	r3, #192	; 0xc0
 8003380:	d818      	bhi.n	80033b4 <UART_SetConfig+0x1f8>
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d00a      	beq.n	800339c <UART_SetConfig+0x1e0>
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d814      	bhi.n	80033b4 <UART_SetConfig+0x1f8>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <UART_SetConfig+0x1d8>
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d008      	beq.n	80033a4 <UART_SetConfig+0x1e8>
 8003392:	e00f      	b.n	80033b4 <UART_SetConfig+0x1f8>
 8003394:	2300      	movs	r3, #0
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339a:	e082      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800339c:	2302      	movs	r3, #2
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a2:	e07e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033a4:	2304      	movs	r3, #4
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e07a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033ac:	2308      	movs	r3, #8
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e076      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033b4:	2310      	movs	r3, #16
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e072      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a35      	ldr	r2, [pc, #212]	; (8003498 <UART_SetConfig+0x2dc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12a      	bne.n	800341c <UART_SetConfig+0x260>
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <UART_SetConfig+0x2cc>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d4:	d01a      	beq.n	800340c <UART_SetConfig+0x250>
 80033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033da:	d81b      	bhi.n	8003414 <UART_SetConfig+0x258>
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d00c      	beq.n	80033fc <UART_SetConfig+0x240>
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d815      	bhi.n	8003414 <UART_SetConfig+0x258>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <UART_SetConfig+0x238>
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f0:	d008      	beq.n	8003404 <UART_SetConfig+0x248>
 80033f2:	e00f      	b.n	8003414 <UART_SetConfig+0x258>
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fa:	e052      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e04e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e04a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e046      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e042      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a17      	ldr	r2, [pc, #92]	; (8003480 <UART_SetConfig+0x2c4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d13a      	bne.n	800349c <UART_SetConfig+0x2e0>
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <UART_SetConfig+0x2cc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003434:	d01a      	beq.n	800346c <UART_SetConfig+0x2b0>
 8003436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800343a:	d81b      	bhi.n	8003474 <UART_SetConfig+0x2b8>
 800343c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003440:	d00c      	beq.n	800345c <UART_SetConfig+0x2a0>
 8003442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003446:	d815      	bhi.n	8003474 <UART_SetConfig+0x2b8>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <UART_SetConfig+0x298>
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003450:	d008      	beq.n	8003464 <UART_SetConfig+0x2a8>
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x2b8>
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e022      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e01e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e01a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e016      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e012      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800347c:	efff69f3 	.word	0xefff69f3
 8003480:	40008000 	.word	0x40008000
 8003484:	40013800 	.word	0x40013800
 8003488:	40021000 	.word	0x40021000
 800348c:	40004400 	.word	0x40004400
 8003490:	40004800 	.word	0x40004800
 8003494:	40004c00 	.word	0x40004c00
 8003498:	40005000 	.word	0x40005000
 800349c:	2310      	movs	r3, #16
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a9f      	ldr	r2, [pc, #636]	; (8003724 <UART_SetConfig+0x568>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d17a      	bne.n	80035a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d824      	bhi.n	80034fe <UART_SetConfig+0x342>
 80034b4:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <UART_SetConfig+0x300>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034ff 	.word	0x080034ff
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	080034ff 	.word	0x080034ff
 80034cc:	080034ef 	.word	0x080034ef
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	080034ff 	.word	0x080034ff
 80034d8:	080034ff 	.word	0x080034ff
 80034dc:	080034f7 	.word	0x080034f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe fcea 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 80034e4:	61f8      	str	r0, [r7, #28]
        break;
 80034e6:	e010      	b.n	800350a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e8:	4b8f      	ldr	r3, [pc, #572]	; (8003728 <UART_SetConfig+0x56c>)
 80034ea:	61fb      	str	r3, [r7, #28]
        break;
 80034ec:	e00d      	b.n	800350a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ee:	f7fe fc4b 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 80034f2:	61f8      	str	r0, [r7, #28]
        break;
 80034f4:	e009      	b.n	800350a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	61fb      	str	r3, [r7, #28]
        break;
 80034fc:	e005      	b.n	800350a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80fb 	beq.w	8003708 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	429a      	cmp	r2, r3
 8003520:	d305      	bcc.n	800352e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	429a      	cmp	r2, r3
 800352c:	d903      	bls.n	8003536 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003534:	e0e8      	b.n	8003708 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2200      	movs	r2, #0
 800353a:	461c      	mov	r4, r3
 800353c:	4615      	mov	r5, r2
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	022b      	lsls	r3, r5, #8
 8003548:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800354c:	0222      	lsls	r2, r4, #8
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	6849      	ldr	r1, [r1, #4]
 8003552:	0849      	lsrs	r1, r1, #1
 8003554:	2000      	movs	r0, #0
 8003556:	4688      	mov	r8, r1
 8003558:	4681      	mov	r9, r0
 800355a:	eb12 0a08 	adds.w	sl, r2, r8
 800355e:	eb43 0b09 	adc.w	fp, r3, r9
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003570:	4650      	mov	r0, sl
 8003572:	4659      	mov	r1, fp
 8003574:	f7fc fe7c 	bl	8000270 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003586:	d308      	bcc.n	800359a <UART_SetConfig+0x3de>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d204      	bcs.n	800359a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	e0b6      	b.n	8003708 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035a0:	e0b2      	b.n	8003708 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035aa:	d15e      	bne.n	800366a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d828      	bhi.n	8003606 <UART_SetConfig+0x44a>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <UART_SetConfig+0x400>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	080035f1 	.word	0x080035f1
 80035c8:	08003607 	.word	0x08003607
 80035cc:	080035f7 	.word	0x080035f7
 80035d0:	08003607 	.word	0x08003607
 80035d4:	08003607 	.word	0x08003607
 80035d8:	08003607 	.word	0x08003607
 80035dc:	080035ff 	.word	0x080035ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7fe fc6a 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 80035e4:	61f8      	str	r0, [r7, #28]
        break;
 80035e6:	e014      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e8:	f7fe fc7c 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 80035ec:	61f8      	str	r0, [r7, #28]
        break;
 80035ee:	e010      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f0:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <UART_SetConfig+0x56c>)
 80035f2:	61fb      	str	r3, [r7, #28]
        break;
 80035f4:	e00d      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f6:	f7fe fbc7 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 80035fa:	61f8      	str	r0, [r7, #28]
        break;
 80035fc:	e009      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003602:	61fb      	str	r3, [r7, #28]
        break;
 8003604:	e005      	b.n	8003612 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d077      	beq.n	8003708 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	441a      	add	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b0f      	cmp	r3, #15
 8003632:	d916      	bls.n	8003662 <UART_SetConfig+0x4a6>
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d212      	bcs.n	8003662 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f023 030f 	bic.w	r3, r3, #15
 8003644:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	b29a      	uxth	r2, r3
 8003652:	8afb      	ldrh	r3, [r7, #22]
 8003654:	4313      	orrs	r3, r2
 8003656:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	8afa      	ldrh	r2, [r7, #22]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e052      	b.n	8003708 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003668:	e04e      	b.n	8003708 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800366a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800366e:	2b08      	cmp	r3, #8
 8003670:	d827      	bhi.n	80036c2 <UART_SetConfig+0x506>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <UART_SetConfig+0x4bc>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036c3 	.word	0x080036c3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036c3 	.word	0x080036c3
 8003690:	080036c3 	.word	0x080036c3
 8003694:	080036c3 	.word	0x080036c3
 8003698:	080036bb 	.word	0x080036bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7fe fc0c 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 80036a0:	61f8      	str	r0, [r7, #28]
        break;
 80036a2:	e014      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7fe fc1e 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
 80036a8:	61f8      	str	r0, [r7, #28]
        break;
 80036aa:	e010      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <UART_SetConfig+0x56c>)
 80036ae:	61fb      	str	r3, [r7, #28]
        break;
 80036b0:	e00d      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b2:	f7fe fb69 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 80036b6:	61f8      	str	r0, [r7, #28]
        break;
 80036b8:	e009      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036be:	61fb      	str	r3, [r7, #28]
        break;
 80036c0:	e005      	b.n	80036ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036cc:	bf00      	nop
    }

    if (pclk != 0U)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d019      	beq.n	8003708 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	085a      	lsrs	r2, r3, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	441a      	add	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d909      	bls.n	8003702 <UART_SetConfig+0x546>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d205      	bcs.n	8003702 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	e002      	b.n	8003708 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003722:	bf00      	nop
 8003724:	40008000 	.word	0x40008000
 8003728:	00f42400 	.word	0x00f42400

0800372c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01a      	beq.n	8003842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382a:	d10a      	bne.n	8003842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af02      	add	r7, sp, #8
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003880:	f7fd f9ca 	bl	8000c18 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d10e      	bne.n	80038b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f82d 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e023      	b.n	80038fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d10e      	bne.n	80038de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f817 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e00d      	b.n	80038fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b09c      	sub	sp, #112	; 0x70
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	4613      	mov	r3, r2
 8003910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003912:	e0a5      	b.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	f000 80a1 	beq.w	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fd f97b 	bl	8000c18 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <UART_WaitOnFlagUntilTimeout+0x32>
 800392e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003930:	2b00      	cmp	r3, #0
 8003932:	d13e      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003948:	667b      	str	r3, [r7, #100]	; 0x64
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003954:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e6      	bne.n	8003934 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3308      	adds	r3, #8
 800396c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	663b      	str	r3, [r7, #96]	; 0x60
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003986:	64ba      	str	r2, [r7, #72]	; 0x48
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800398c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e067      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d04f      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ce:	d147      	bne.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e6      	bne.n	80039da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a2c:	623a      	str	r2, [r7, #32]
 8003a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	69f9      	ldr	r1, [r7, #28]
 8003a32:	6a3a      	ldr	r2, [r7, #32]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e010      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	f43f af4a 	beq.w	8003914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3770      	adds	r7, #112	; 0x70
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b097      	sub	sp, #92	; 0x5c
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d10e      	bne.n	8003ade <UART_Start_Receive_IT+0x52>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <UART_Start_Receive_IT+0x48>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ad2:	e02d      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003adc:	e028      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <UART_Start_Receive_IT+0x76>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <UART_Start_Receive_IT+0x6c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	22ff      	movs	r2, #255	; 0xff
 8003af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003af6:	e01b      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	227f      	movs	r2, #127	; 0x7f
 8003afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b00:	e016      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0a:	d10d      	bne.n	8003b28 <UART_Start_Receive_IT+0x9c>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <UART_Start_Receive_IT+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	227f      	movs	r2, #127	; 0x7f
 8003b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b1c:	e008      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	223f      	movs	r2, #63	; 0x3f
 8003b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b26:	e003      	b.n	8003b30 <UART_Start_Receive_IT+0xa4>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	657b      	str	r3, [r7, #84]	; 0x54
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e5      	bne.n	8003b3e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7a:	d107      	bne.n	8003b8c <UART_Start_Receive_IT+0x100>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <UART_Start_Receive_IT+0x18c>)
 8003b88:	665a      	str	r2, [r3, #100]	; 0x64
 8003b8a:	e002      	b.n	8003b92 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <UART_Start_Receive_IT+0x190>)
 8003b90:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d019      	beq.n	8003bd6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e6      	bne.n	8003ba2 <UART_Start_Receive_IT+0x116>
 8003bd4:	e018      	b.n	8003c08 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	613b      	str	r3, [r7, #16]
   return(result);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f043 0320 	orr.w	r3, r3, #32
 8003bea:	653b      	str	r3, [r7, #80]	; 0x50
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	69f9      	ldr	r1, [r7, #28]
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	375c      	adds	r7, #92	; 0x5c
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	08003ec7 	.word	0x08003ec7
 8003c1c:	08003d67 	.word	0x08003d67

08003c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b095      	sub	sp, #84	; 0x54
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
 8003c48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e6      	bne.n	8003c28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d118      	bne.n	8003cc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 0310 	bic.w	r3, r3, #16
 8003caa:	647b      	str	r3, [r7, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e6      	bne.n	8003c96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003cda:	bf00      	nop
 8003cdc:	3754      	adds	r7, #84	; 0x54
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff fa43 	bl	8003190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	613b      	str	r3, [r7, #16]
   return(result);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e6      	bne.n	8003d1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fa0f 	bl	800317c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5e:	bf00      	nop
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b096      	sub	sp, #88	; 0x58
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d7c:	2b22      	cmp	r3, #34	; 0x22
 8003d7e:	f040 8094 	bne.w	8003eaa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d90:	b2d9      	uxtb	r1, r3
 8003d92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d179      	bne.n	8003ebe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dde:	653b      	str	r3, [r7, #80]	; 0x50
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e6      	bne.n	8003dca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3308      	adds	r3, #8
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3308      	adds	r3, #8
 8003e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d12e      	bne.n	8003ea2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0310 	bic.w	r3, r3, #16
 8003e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	69b9      	ldr	r1, [r7, #24]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	617b      	str	r3, [r7, #20]
   return(result);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e6      	bne.n	8003e4a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d103      	bne.n	8003e92 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2210      	movs	r2, #16
 8003e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff f982 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ea0:	e00d      	b.n	8003ebe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fc fcd2 	bl	800084c <HAL_UART_RxCpltCallback>
}
 8003ea8:	e009      	b.n	8003ebe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	8b1b      	ldrh	r3, [r3, #24]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	831a      	strh	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	3758      	adds	r7, #88	; 0x58
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b096      	sub	sp, #88	; 0x58
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ed4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003edc:	2b22      	cmp	r3, #34	; 0x22
 8003ede:	f040 8094 	bne.w	800400a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ee8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ef2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ef6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003efa:	4013      	ands	r3, r2
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d179      	bne.n	800401e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e6      	bne.n	8003f2a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3308      	adds	r3, #8
 8003f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d12e      	bne.n	8004002 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e6      	bne.n	8003faa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d103      	bne.n	8003ff2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff f8d2 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004000:	e00d      	b.n	800401e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc fc22 	bl	800084c <HAL_UART_RxCpltCallback>
}
 8004008:	e009      	b.n	800401e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	8b1b      	ldrh	r3, [r3, #24]
 8004010:	b29a      	uxth	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0208 	orr.w	r2, r2, #8
 800401a:	b292      	uxth	r2, r2
 800401c:	831a      	strh	r2, [r3, #24]
}
 800401e:	bf00      	nop
 8004020:	3758      	adds	r7, #88	; 0x58
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <__errno>:
 800403c:	4b01      	ldr	r3, [pc, #4]	; (8004044 <__errno+0x8>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000010c 	.word	0x2000010c

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4d0d      	ldr	r5, [pc, #52]	; (8004080 <__libc_init_array+0x38>)
 800404c:	4c0d      	ldr	r4, [pc, #52]	; (8004084 <__libc_init_array+0x3c>)
 800404e:	1b64      	subs	r4, r4, r5
 8004050:	10a4      	asrs	r4, r4, #2
 8004052:	2600      	movs	r6, #0
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	4d0b      	ldr	r5, [pc, #44]	; (8004088 <__libc_init_array+0x40>)
 800405a:	4c0c      	ldr	r4, [pc, #48]	; (800408c <__libc_init_array+0x44>)
 800405c:	f000 fca2 	bl	80049a4 <_init>
 8004060:	1b64      	subs	r4, r4, r5
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	2600      	movs	r6, #0
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	f855 3b04 	ldr.w	r3, [r5], #4
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	08004ad0 	.word	0x08004ad0
 8004084:	08004ad0 	.word	0x08004ad0
 8004088:	08004ad0 	.word	0x08004ad0
 800408c:	08004ad4 	.word	0x08004ad4

08004090 <memcpy>:
 8004090:	440a      	add	r2, r1
 8004092:	4291      	cmp	r1, r2
 8004094:	f100 33ff 	add.w	r3, r0, #4294967295
 8004098:	d100      	bne.n	800409c <memcpy+0xc>
 800409a:	4770      	bx	lr
 800409c:	b510      	push	{r4, lr}
 800409e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a6:	4291      	cmp	r1, r2
 80040a8:	d1f9      	bne.n	800409e <memcpy+0xe>
 80040aa:	bd10      	pop	{r4, pc}

080040ac <memset>:
 80040ac:	4402      	add	r2, r0
 80040ae:	4603      	mov	r3, r0
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d100      	bne.n	80040b6 <memset+0xa>
 80040b4:	4770      	bx	lr
 80040b6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ba:	e7f9      	b.n	80040b0 <memset+0x4>

080040bc <sniprintf>:
 80040bc:	b40c      	push	{r2, r3}
 80040be:	b530      	push	{r4, r5, lr}
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <sniprintf+0x64>)
 80040c2:	1e0c      	subs	r4, r1, #0
 80040c4:	681d      	ldr	r5, [r3, #0]
 80040c6:	b09d      	sub	sp, #116	; 0x74
 80040c8:	da08      	bge.n	80040dc <sniprintf+0x20>
 80040ca:	238b      	movs	r3, #139	; 0x8b
 80040cc:	602b      	str	r3, [r5, #0]
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295
 80040d2:	b01d      	add	sp, #116	; 0x74
 80040d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040d8:	b002      	add	sp, #8
 80040da:	4770      	bx	lr
 80040dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80040e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040e4:	bf14      	ite	ne
 80040e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040ea:	4623      	moveq	r3, r4
 80040ec:	9304      	str	r3, [sp, #16]
 80040ee:	9307      	str	r3, [sp, #28]
 80040f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	9006      	str	r0, [sp, #24]
 80040f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80040fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040fe:	ab21      	add	r3, sp, #132	; 0x84
 8004100:	a902      	add	r1, sp, #8
 8004102:	4628      	mov	r0, r5
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	f000 f869 	bl	80041dc <_svfiprintf_r>
 800410a:	1c43      	adds	r3, r0, #1
 800410c:	bfbc      	itt	lt
 800410e:	238b      	movlt	r3, #139	; 0x8b
 8004110:	602b      	strlt	r3, [r5, #0]
 8004112:	2c00      	cmp	r4, #0
 8004114:	d0dd      	beq.n	80040d2 <sniprintf+0x16>
 8004116:	9b02      	ldr	r3, [sp, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e7d9      	b.n	80040d2 <sniprintf+0x16>
 800411e:	bf00      	nop
 8004120:	2000010c 	.word	0x2000010c

08004124 <__ssputs_r>:
 8004124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004128:	688e      	ldr	r6, [r1, #8]
 800412a:	429e      	cmp	r6, r3
 800412c:	4682      	mov	sl, r0
 800412e:	460c      	mov	r4, r1
 8004130:	4690      	mov	r8, r2
 8004132:	461f      	mov	r7, r3
 8004134:	d838      	bhi.n	80041a8 <__ssputs_r+0x84>
 8004136:	898a      	ldrh	r2, [r1, #12]
 8004138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800413c:	d032      	beq.n	80041a4 <__ssputs_r+0x80>
 800413e:	6825      	ldr	r5, [r4, #0]
 8004140:	6909      	ldr	r1, [r1, #16]
 8004142:	eba5 0901 	sub.w	r9, r5, r1
 8004146:	6965      	ldr	r5, [r4, #20]
 8004148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800414c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004150:	3301      	adds	r3, #1
 8004152:	444b      	add	r3, r9
 8004154:	106d      	asrs	r5, r5, #1
 8004156:	429d      	cmp	r5, r3
 8004158:	bf38      	it	cc
 800415a:	461d      	movcc	r5, r3
 800415c:	0553      	lsls	r3, r2, #21
 800415e:	d531      	bpl.n	80041c4 <__ssputs_r+0xa0>
 8004160:	4629      	mov	r1, r5
 8004162:	f000 fb55 	bl	8004810 <_malloc_r>
 8004166:	4606      	mov	r6, r0
 8004168:	b950      	cbnz	r0, 8004180 <__ssputs_r+0x5c>
 800416a:	230c      	movs	r3, #12
 800416c:	f8ca 3000 	str.w	r3, [sl]
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004180:	6921      	ldr	r1, [r4, #16]
 8004182:	464a      	mov	r2, r9
 8004184:	f7ff ff84 	bl	8004090 <memcpy>
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800418e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	6126      	str	r6, [r4, #16]
 8004196:	6165      	str	r5, [r4, #20]
 8004198:	444e      	add	r6, r9
 800419a:	eba5 0509 	sub.w	r5, r5, r9
 800419e:	6026      	str	r6, [r4, #0]
 80041a0:	60a5      	str	r5, [r4, #8]
 80041a2:	463e      	mov	r6, r7
 80041a4:	42be      	cmp	r6, r7
 80041a6:	d900      	bls.n	80041aa <__ssputs_r+0x86>
 80041a8:	463e      	mov	r6, r7
 80041aa:	6820      	ldr	r0, [r4, #0]
 80041ac:	4632      	mov	r2, r6
 80041ae:	4641      	mov	r1, r8
 80041b0:	f000 faa8 	bl	8004704 <memmove>
 80041b4:	68a3      	ldr	r3, [r4, #8]
 80041b6:	1b9b      	subs	r3, r3, r6
 80041b8:	60a3      	str	r3, [r4, #8]
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	4433      	add	r3, r6
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	2000      	movs	r0, #0
 80041c2:	e7db      	b.n	800417c <__ssputs_r+0x58>
 80041c4:	462a      	mov	r2, r5
 80041c6:	f000 fb97 	bl	80048f8 <_realloc_r>
 80041ca:	4606      	mov	r6, r0
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d1e1      	bne.n	8004194 <__ssputs_r+0x70>
 80041d0:	6921      	ldr	r1, [r4, #16]
 80041d2:	4650      	mov	r0, sl
 80041d4:	f000 fab0 	bl	8004738 <_free_r>
 80041d8:	e7c7      	b.n	800416a <__ssputs_r+0x46>
	...

080041dc <_svfiprintf_r>:
 80041dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e0:	4698      	mov	r8, r3
 80041e2:	898b      	ldrh	r3, [r1, #12]
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	b09d      	sub	sp, #116	; 0x74
 80041e8:	4607      	mov	r7, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	4614      	mov	r4, r2
 80041ee:	d50e      	bpl.n	800420e <_svfiprintf_r+0x32>
 80041f0:	690b      	ldr	r3, [r1, #16]
 80041f2:	b963      	cbnz	r3, 800420e <_svfiprintf_r+0x32>
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	f000 fb0b 	bl	8004810 <_malloc_r>
 80041fa:	6028      	str	r0, [r5, #0]
 80041fc:	6128      	str	r0, [r5, #16]
 80041fe:	b920      	cbnz	r0, 800420a <_svfiprintf_r+0x2e>
 8004200:	230c      	movs	r3, #12
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	e0d1      	b.n	80043ae <_svfiprintf_r+0x1d2>
 800420a:	2340      	movs	r3, #64	; 0x40
 800420c:	616b      	str	r3, [r5, #20]
 800420e:	2300      	movs	r3, #0
 8004210:	9309      	str	r3, [sp, #36]	; 0x24
 8004212:	2320      	movs	r3, #32
 8004214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004218:	f8cd 800c 	str.w	r8, [sp, #12]
 800421c:	2330      	movs	r3, #48	; 0x30
 800421e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043c8 <_svfiprintf_r+0x1ec>
 8004222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004226:	f04f 0901 	mov.w	r9, #1
 800422a:	4623      	mov	r3, r4
 800422c:	469a      	mov	sl, r3
 800422e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004232:	b10a      	cbz	r2, 8004238 <_svfiprintf_r+0x5c>
 8004234:	2a25      	cmp	r2, #37	; 0x25
 8004236:	d1f9      	bne.n	800422c <_svfiprintf_r+0x50>
 8004238:	ebba 0b04 	subs.w	fp, sl, r4
 800423c:	d00b      	beq.n	8004256 <_svfiprintf_r+0x7a>
 800423e:	465b      	mov	r3, fp
 8004240:	4622      	mov	r2, r4
 8004242:	4629      	mov	r1, r5
 8004244:	4638      	mov	r0, r7
 8004246:	f7ff ff6d 	bl	8004124 <__ssputs_r>
 800424a:	3001      	adds	r0, #1
 800424c:	f000 80aa 	beq.w	80043a4 <_svfiprintf_r+0x1c8>
 8004250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004252:	445a      	add	r2, fp
 8004254:	9209      	str	r2, [sp, #36]	; 0x24
 8004256:	f89a 3000 	ldrb.w	r3, [sl]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80a2 	beq.w	80043a4 <_svfiprintf_r+0x1c8>
 8004260:	2300      	movs	r3, #0
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800426a:	f10a 0a01 	add.w	sl, sl, #1
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	9307      	str	r3, [sp, #28]
 8004272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004276:	931a      	str	r3, [sp, #104]	; 0x68
 8004278:	4654      	mov	r4, sl
 800427a:	2205      	movs	r2, #5
 800427c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004280:	4851      	ldr	r0, [pc, #324]	; (80043c8 <_svfiprintf_r+0x1ec>)
 8004282:	f7fb ffa5 	bl	80001d0 <memchr>
 8004286:	9a04      	ldr	r2, [sp, #16]
 8004288:	b9d8      	cbnz	r0, 80042c2 <_svfiprintf_r+0xe6>
 800428a:	06d0      	lsls	r0, r2, #27
 800428c:	bf44      	itt	mi
 800428e:	2320      	movmi	r3, #32
 8004290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004294:	0711      	lsls	r1, r2, #28
 8004296:	bf44      	itt	mi
 8004298:	232b      	movmi	r3, #43	; 0x2b
 800429a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800429e:	f89a 3000 	ldrb.w	r3, [sl]
 80042a2:	2b2a      	cmp	r3, #42	; 0x2a
 80042a4:	d015      	beq.n	80042d2 <_svfiprintf_r+0xf6>
 80042a6:	9a07      	ldr	r2, [sp, #28]
 80042a8:	4654      	mov	r4, sl
 80042aa:	2000      	movs	r0, #0
 80042ac:	f04f 0c0a 	mov.w	ip, #10
 80042b0:	4621      	mov	r1, r4
 80042b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b6:	3b30      	subs	r3, #48	; 0x30
 80042b8:	2b09      	cmp	r3, #9
 80042ba:	d94e      	bls.n	800435a <_svfiprintf_r+0x17e>
 80042bc:	b1b0      	cbz	r0, 80042ec <_svfiprintf_r+0x110>
 80042be:	9207      	str	r2, [sp, #28]
 80042c0:	e014      	b.n	80042ec <_svfiprintf_r+0x110>
 80042c2:	eba0 0308 	sub.w	r3, r0, r8
 80042c6:	fa09 f303 	lsl.w	r3, r9, r3
 80042ca:	4313      	orrs	r3, r2
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	46a2      	mov	sl, r4
 80042d0:	e7d2      	b.n	8004278 <_svfiprintf_r+0x9c>
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	1d19      	adds	r1, r3, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	9103      	str	r1, [sp, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfbb      	ittet	lt
 80042de:	425b      	neglt	r3, r3
 80042e0:	f042 0202 	orrlt.w	r2, r2, #2
 80042e4:	9307      	strge	r3, [sp, #28]
 80042e6:	9307      	strlt	r3, [sp, #28]
 80042e8:	bfb8      	it	lt
 80042ea:	9204      	strlt	r2, [sp, #16]
 80042ec:	7823      	ldrb	r3, [r4, #0]
 80042ee:	2b2e      	cmp	r3, #46	; 0x2e
 80042f0:	d10c      	bne.n	800430c <_svfiprintf_r+0x130>
 80042f2:	7863      	ldrb	r3, [r4, #1]
 80042f4:	2b2a      	cmp	r3, #42	; 0x2a
 80042f6:	d135      	bne.n	8004364 <_svfiprintf_r+0x188>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9203      	str	r2, [sp, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfb8      	it	lt
 8004304:	f04f 33ff 	movlt.w	r3, #4294967295
 8004308:	3402      	adds	r4, #2
 800430a:	9305      	str	r3, [sp, #20]
 800430c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043d8 <_svfiprintf_r+0x1fc>
 8004310:	7821      	ldrb	r1, [r4, #0]
 8004312:	2203      	movs	r2, #3
 8004314:	4650      	mov	r0, sl
 8004316:	f7fb ff5b 	bl	80001d0 <memchr>
 800431a:	b140      	cbz	r0, 800432e <_svfiprintf_r+0x152>
 800431c:	2340      	movs	r3, #64	; 0x40
 800431e:	eba0 000a 	sub.w	r0, r0, sl
 8004322:	fa03 f000 	lsl.w	r0, r3, r0
 8004326:	9b04      	ldr	r3, [sp, #16]
 8004328:	4303      	orrs	r3, r0
 800432a:	3401      	adds	r4, #1
 800432c:	9304      	str	r3, [sp, #16]
 800432e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004332:	4826      	ldr	r0, [pc, #152]	; (80043cc <_svfiprintf_r+0x1f0>)
 8004334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004338:	2206      	movs	r2, #6
 800433a:	f7fb ff49 	bl	80001d0 <memchr>
 800433e:	2800      	cmp	r0, #0
 8004340:	d038      	beq.n	80043b4 <_svfiprintf_r+0x1d8>
 8004342:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <_svfiprintf_r+0x1f4>)
 8004344:	bb1b      	cbnz	r3, 800438e <_svfiprintf_r+0x1b2>
 8004346:	9b03      	ldr	r3, [sp, #12]
 8004348:	3307      	adds	r3, #7
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	3308      	adds	r3, #8
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004354:	4433      	add	r3, r6
 8004356:	9309      	str	r3, [sp, #36]	; 0x24
 8004358:	e767      	b.n	800422a <_svfiprintf_r+0x4e>
 800435a:	fb0c 3202 	mla	r2, ip, r2, r3
 800435e:	460c      	mov	r4, r1
 8004360:	2001      	movs	r0, #1
 8004362:	e7a5      	b.n	80042b0 <_svfiprintf_r+0xd4>
 8004364:	2300      	movs	r3, #0
 8004366:	3401      	adds	r4, #1
 8004368:	9305      	str	r3, [sp, #20]
 800436a:	4619      	mov	r1, r3
 800436c:	f04f 0c0a 	mov.w	ip, #10
 8004370:	4620      	mov	r0, r4
 8004372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004376:	3a30      	subs	r2, #48	; 0x30
 8004378:	2a09      	cmp	r2, #9
 800437a:	d903      	bls.n	8004384 <_svfiprintf_r+0x1a8>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0c5      	beq.n	800430c <_svfiprintf_r+0x130>
 8004380:	9105      	str	r1, [sp, #20]
 8004382:	e7c3      	b.n	800430c <_svfiprintf_r+0x130>
 8004384:	fb0c 2101 	mla	r1, ip, r1, r2
 8004388:	4604      	mov	r4, r0
 800438a:	2301      	movs	r3, #1
 800438c:	e7f0      	b.n	8004370 <_svfiprintf_r+0x194>
 800438e:	ab03      	add	r3, sp, #12
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	462a      	mov	r2, r5
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <_svfiprintf_r+0x1f8>)
 8004396:	a904      	add	r1, sp, #16
 8004398:	4638      	mov	r0, r7
 800439a:	f3af 8000 	nop.w
 800439e:	1c42      	adds	r2, r0, #1
 80043a0:	4606      	mov	r6, r0
 80043a2:	d1d6      	bne.n	8004352 <_svfiprintf_r+0x176>
 80043a4:	89ab      	ldrh	r3, [r5, #12]
 80043a6:	065b      	lsls	r3, r3, #25
 80043a8:	f53f af2c 	bmi.w	8004204 <_svfiprintf_r+0x28>
 80043ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ae:	b01d      	add	sp, #116	; 0x74
 80043b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	462a      	mov	r2, r5
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <_svfiprintf_r+0x1f8>)
 80043bc:	a904      	add	r1, sp, #16
 80043be:	4638      	mov	r0, r7
 80043c0:	f000 f87a 	bl	80044b8 <_printf_i>
 80043c4:	e7eb      	b.n	800439e <_svfiprintf_r+0x1c2>
 80043c6:	bf00      	nop
 80043c8:	08004a94 	.word	0x08004a94
 80043cc:	08004a9e 	.word	0x08004a9e
 80043d0:	00000000 	.word	0x00000000
 80043d4:	08004125 	.word	0x08004125
 80043d8:	08004a9a 	.word	0x08004a9a

080043dc <_printf_common>:
 80043dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e0:	4616      	mov	r6, r2
 80043e2:	4699      	mov	r9, r3
 80043e4:	688a      	ldr	r2, [r1, #8]
 80043e6:	690b      	ldr	r3, [r1, #16]
 80043e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bfb8      	it	lt
 80043f0:	4613      	movlt	r3, r2
 80043f2:	6033      	str	r3, [r6, #0]
 80043f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f8:	4607      	mov	r7, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	b10a      	cbz	r2, 8004402 <_printf_common+0x26>
 80043fe:	3301      	adds	r3, #1
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0699      	lsls	r1, r3, #26
 8004406:	bf42      	ittt	mi
 8004408:	6833      	ldrmi	r3, [r6, #0]
 800440a:	3302      	addmi	r3, #2
 800440c:	6033      	strmi	r3, [r6, #0]
 800440e:	6825      	ldr	r5, [r4, #0]
 8004410:	f015 0506 	ands.w	r5, r5, #6
 8004414:	d106      	bne.n	8004424 <_printf_common+0x48>
 8004416:	f104 0a19 	add.w	sl, r4, #25
 800441a:	68e3      	ldr	r3, [r4, #12]
 800441c:	6832      	ldr	r2, [r6, #0]
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	42ab      	cmp	r3, r5
 8004422:	dc26      	bgt.n	8004472 <_printf_common+0x96>
 8004424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004428:	1e13      	subs	r3, r2, #0
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	bf18      	it	ne
 800442e:	2301      	movne	r3, #1
 8004430:	0692      	lsls	r2, r2, #26
 8004432:	d42b      	bmi.n	800448c <_printf_common+0xb0>
 8004434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004438:	4649      	mov	r1, r9
 800443a:	4638      	mov	r0, r7
 800443c:	47c0      	blx	r8
 800443e:	3001      	adds	r0, #1
 8004440:	d01e      	beq.n	8004480 <_printf_common+0xa4>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	68e5      	ldr	r5, [r4, #12]
 8004446:	6832      	ldr	r2, [r6, #0]
 8004448:	f003 0306 	and.w	r3, r3, #6
 800444c:	2b04      	cmp	r3, #4
 800444e:	bf08      	it	eq
 8004450:	1aad      	subeq	r5, r5, r2
 8004452:	68a3      	ldr	r3, [r4, #8]
 8004454:	6922      	ldr	r2, [r4, #16]
 8004456:	bf0c      	ite	eq
 8004458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800445c:	2500      	movne	r5, #0
 800445e:	4293      	cmp	r3, r2
 8004460:	bfc4      	itt	gt
 8004462:	1a9b      	subgt	r3, r3, r2
 8004464:	18ed      	addgt	r5, r5, r3
 8004466:	2600      	movs	r6, #0
 8004468:	341a      	adds	r4, #26
 800446a:	42b5      	cmp	r5, r6
 800446c:	d11a      	bne.n	80044a4 <_printf_common+0xc8>
 800446e:	2000      	movs	r0, #0
 8004470:	e008      	b.n	8004484 <_printf_common+0xa8>
 8004472:	2301      	movs	r3, #1
 8004474:	4652      	mov	r2, sl
 8004476:	4649      	mov	r1, r9
 8004478:	4638      	mov	r0, r7
 800447a:	47c0      	blx	r8
 800447c:	3001      	adds	r0, #1
 800447e:	d103      	bne.n	8004488 <_printf_common+0xac>
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004488:	3501      	adds	r5, #1
 800448a:	e7c6      	b.n	800441a <_printf_common+0x3e>
 800448c:	18e1      	adds	r1, r4, r3
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	2030      	movs	r0, #48	; 0x30
 8004492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004496:	4422      	add	r2, r4
 8004498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800449c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044a0:	3302      	adds	r3, #2
 80044a2:	e7c7      	b.n	8004434 <_printf_common+0x58>
 80044a4:	2301      	movs	r3, #1
 80044a6:	4622      	mov	r2, r4
 80044a8:	4649      	mov	r1, r9
 80044aa:	4638      	mov	r0, r7
 80044ac:	47c0      	blx	r8
 80044ae:	3001      	adds	r0, #1
 80044b0:	d0e6      	beq.n	8004480 <_printf_common+0xa4>
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7d9      	b.n	800446a <_printf_common+0x8e>
	...

080044b8 <_printf_i>:
 80044b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	7e0f      	ldrb	r7, [r1, #24]
 80044be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044c0:	2f78      	cmp	r7, #120	; 0x78
 80044c2:	4691      	mov	r9, r2
 80044c4:	4680      	mov	r8, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	469a      	mov	sl, r3
 80044ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ce:	d807      	bhi.n	80044e0 <_printf_i+0x28>
 80044d0:	2f62      	cmp	r7, #98	; 0x62
 80044d2:	d80a      	bhi.n	80044ea <_printf_i+0x32>
 80044d4:	2f00      	cmp	r7, #0
 80044d6:	f000 80d8 	beq.w	800468a <_printf_i+0x1d2>
 80044da:	2f58      	cmp	r7, #88	; 0x58
 80044dc:	f000 80a3 	beq.w	8004626 <_printf_i+0x16e>
 80044e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e8:	e03a      	b.n	8004560 <_printf_i+0xa8>
 80044ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ee:	2b15      	cmp	r3, #21
 80044f0:	d8f6      	bhi.n	80044e0 <_printf_i+0x28>
 80044f2:	a101      	add	r1, pc, #4	; (adr r1, 80044f8 <_printf_i+0x40>)
 80044f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f8:	08004551 	.word	0x08004551
 80044fc:	08004565 	.word	0x08004565
 8004500:	080044e1 	.word	0x080044e1
 8004504:	080044e1 	.word	0x080044e1
 8004508:	080044e1 	.word	0x080044e1
 800450c:	080044e1 	.word	0x080044e1
 8004510:	08004565 	.word	0x08004565
 8004514:	080044e1 	.word	0x080044e1
 8004518:	080044e1 	.word	0x080044e1
 800451c:	080044e1 	.word	0x080044e1
 8004520:	080044e1 	.word	0x080044e1
 8004524:	08004671 	.word	0x08004671
 8004528:	08004595 	.word	0x08004595
 800452c:	08004653 	.word	0x08004653
 8004530:	080044e1 	.word	0x080044e1
 8004534:	080044e1 	.word	0x080044e1
 8004538:	08004693 	.word	0x08004693
 800453c:	080044e1 	.word	0x080044e1
 8004540:	08004595 	.word	0x08004595
 8004544:	080044e1 	.word	0x080044e1
 8004548:	080044e1 	.word	0x080044e1
 800454c:	0800465b 	.word	0x0800465b
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	1d1a      	adds	r2, r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	602a      	str	r2, [r5, #0]
 8004558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800455c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004560:	2301      	movs	r3, #1
 8004562:	e0a3      	b.n	80046ac <_printf_i+0x1f4>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	6829      	ldr	r1, [r5, #0]
 8004568:	0606      	lsls	r6, r0, #24
 800456a:	f101 0304 	add.w	r3, r1, #4
 800456e:	d50a      	bpl.n	8004586 <_printf_i+0xce>
 8004570:	680e      	ldr	r6, [r1, #0]
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	2e00      	cmp	r6, #0
 8004576:	da03      	bge.n	8004580 <_printf_i+0xc8>
 8004578:	232d      	movs	r3, #45	; 0x2d
 800457a:	4276      	negs	r6, r6
 800457c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004580:	485e      	ldr	r0, [pc, #376]	; (80046fc <_printf_i+0x244>)
 8004582:	230a      	movs	r3, #10
 8004584:	e019      	b.n	80045ba <_printf_i+0x102>
 8004586:	680e      	ldr	r6, [r1, #0]
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800458e:	bf18      	it	ne
 8004590:	b236      	sxthne	r6, r6
 8004592:	e7ef      	b.n	8004574 <_printf_i+0xbc>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	6820      	ldr	r0, [r4, #0]
 8004598:	1d19      	adds	r1, r3, #4
 800459a:	6029      	str	r1, [r5, #0]
 800459c:	0601      	lsls	r1, r0, #24
 800459e:	d501      	bpl.n	80045a4 <_printf_i+0xec>
 80045a0:	681e      	ldr	r6, [r3, #0]
 80045a2:	e002      	b.n	80045aa <_printf_i+0xf2>
 80045a4:	0646      	lsls	r6, r0, #25
 80045a6:	d5fb      	bpl.n	80045a0 <_printf_i+0xe8>
 80045a8:	881e      	ldrh	r6, [r3, #0]
 80045aa:	4854      	ldr	r0, [pc, #336]	; (80046fc <_printf_i+0x244>)
 80045ac:	2f6f      	cmp	r7, #111	; 0x6f
 80045ae:	bf0c      	ite	eq
 80045b0:	2308      	moveq	r3, #8
 80045b2:	230a      	movne	r3, #10
 80045b4:	2100      	movs	r1, #0
 80045b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ba:	6865      	ldr	r5, [r4, #4]
 80045bc:	60a5      	str	r5, [r4, #8]
 80045be:	2d00      	cmp	r5, #0
 80045c0:	bfa2      	ittt	ge
 80045c2:	6821      	ldrge	r1, [r4, #0]
 80045c4:	f021 0104 	bicge.w	r1, r1, #4
 80045c8:	6021      	strge	r1, [r4, #0]
 80045ca:	b90e      	cbnz	r6, 80045d0 <_printf_i+0x118>
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	d04d      	beq.n	800466c <_printf_i+0x1b4>
 80045d0:	4615      	mov	r5, r2
 80045d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80045d6:	fb03 6711 	mls	r7, r3, r1, r6
 80045da:	5dc7      	ldrb	r7, [r0, r7]
 80045dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045e0:	4637      	mov	r7, r6
 80045e2:	42bb      	cmp	r3, r7
 80045e4:	460e      	mov	r6, r1
 80045e6:	d9f4      	bls.n	80045d2 <_printf_i+0x11a>
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d10b      	bne.n	8004604 <_printf_i+0x14c>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	07de      	lsls	r6, r3, #31
 80045f0:	d508      	bpl.n	8004604 <_printf_i+0x14c>
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	6861      	ldr	r1, [r4, #4]
 80045f6:	4299      	cmp	r1, r3
 80045f8:	bfde      	ittt	le
 80045fa:	2330      	movle	r3, #48	; 0x30
 80045fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004604:	1b52      	subs	r2, r2, r5
 8004606:	6122      	str	r2, [r4, #16]
 8004608:	f8cd a000 	str.w	sl, [sp]
 800460c:	464b      	mov	r3, r9
 800460e:	aa03      	add	r2, sp, #12
 8004610:	4621      	mov	r1, r4
 8004612:	4640      	mov	r0, r8
 8004614:	f7ff fee2 	bl	80043dc <_printf_common>
 8004618:	3001      	adds	r0, #1
 800461a:	d14c      	bne.n	80046b6 <_printf_i+0x1fe>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	b004      	add	sp, #16
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	4835      	ldr	r0, [pc, #212]	; (80046fc <_printf_i+0x244>)
 8004628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800462c:	6829      	ldr	r1, [r5, #0]
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f851 6b04 	ldr.w	r6, [r1], #4
 8004634:	6029      	str	r1, [r5, #0]
 8004636:	061d      	lsls	r5, r3, #24
 8004638:	d514      	bpl.n	8004664 <_printf_i+0x1ac>
 800463a:	07df      	lsls	r7, r3, #31
 800463c:	bf44      	itt	mi
 800463e:	f043 0320 	orrmi.w	r3, r3, #32
 8004642:	6023      	strmi	r3, [r4, #0]
 8004644:	b91e      	cbnz	r6, 800464e <_printf_i+0x196>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	f023 0320 	bic.w	r3, r3, #32
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	2310      	movs	r3, #16
 8004650:	e7b0      	b.n	80045b4 <_printf_i+0xfc>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f043 0320 	orr.w	r3, r3, #32
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	2378      	movs	r3, #120	; 0x78
 800465c:	4828      	ldr	r0, [pc, #160]	; (8004700 <_printf_i+0x248>)
 800465e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004662:	e7e3      	b.n	800462c <_printf_i+0x174>
 8004664:	0659      	lsls	r1, r3, #25
 8004666:	bf48      	it	mi
 8004668:	b2b6      	uxthmi	r6, r6
 800466a:	e7e6      	b.n	800463a <_printf_i+0x182>
 800466c:	4615      	mov	r5, r2
 800466e:	e7bb      	b.n	80045e8 <_printf_i+0x130>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	6826      	ldr	r6, [r4, #0]
 8004674:	6961      	ldr	r1, [r4, #20]
 8004676:	1d18      	adds	r0, r3, #4
 8004678:	6028      	str	r0, [r5, #0]
 800467a:	0635      	lsls	r5, r6, #24
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	d501      	bpl.n	8004684 <_printf_i+0x1cc>
 8004680:	6019      	str	r1, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0x1d2>
 8004684:	0670      	lsls	r0, r6, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0x1c8>
 8004688:	8019      	strh	r1, [r3, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	6123      	str	r3, [r4, #16]
 800468e:	4615      	mov	r5, r2
 8004690:	e7ba      	b.n	8004608 <_printf_i+0x150>
 8004692:	682b      	ldr	r3, [r5, #0]
 8004694:	1d1a      	adds	r2, r3, #4
 8004696:	602a      	str	r2, [r5, #0]
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	6862      	ldr	r2, [r4, #4]
 800469c:	2100      	movs	r1, #0
 800469e:	4628      	mov	r0, r5
 80046a0:	f7fb fd96 	bl	80001d0 <memchr>
 80046a4:	b108      	cbz	r0, 80046aa <_printf_i+0x1f2>
 80046a6:	1b40      	subs	r0, r0, r5
 80046a8:	6060      	str	r0, [r4, #4]
 80046aa:	6863      	ldr	r3, [r4, #4]
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	2300      	movs	r3, #0
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b4:	e7a8      	b.n	8004608 <_printf_i+0x150>
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	462a      	mov	r2, r5
 80046ba:	4649      	mov	r1, r9
 80046bc:	4640      	mov	r0, r8
 80046be:	47d0      	blx	sl
 80046c0:	3001      	adds	r0, #1
 80046c2:	d0ab      	beq.n	800461c <_printf_i+0x164>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	079b      	lsls	r3, r3, #30
 80046c8:	d413      	bmi.n	80046f2 <_printf_i+0x23a>
 80046ca:	68e0      	ldr	r0, [r4, #12]
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	4298      	cmp	r0, r3
 80046d0:	bfb8      	it	lt
 80046d2:	4618      	movlt	r0, r3
 80046d4:	e7a4      	b.n	8004620 <_printf_i+0x168>
 80046d6:	2301      	movs	r3, #1
 80046d8:	4632      	mov	r2, r6
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	47d0      	blx	sl
 80046e0:	3001      	adds	r0, #1
 80046e2:	d09b      	beq.n	800461c <_printf_i+0x164>
 80046e4:	3501      	adds	r5, #1
 80046e6:	68e3      	ldr	r3, [r4, #12]
 80046e8:	9903      	ldr	r1, [sp, #12]
 80046ea:	1a5b      	subs	r3, r3, r1
 80046ec:	42ab      	cmp	r3, r5
 80046ee:	dcf2      	bgt.n	80046d6 <_printf_i+0x21e>
 80046f0:	e7eb      	b.n	80046ca <_printf_i+0x212>
 80046f2:	2500      	movs	r5, #0
 80046f4:	f104 0619 	add.w	r6, r4, #25
 80046f8:	e7f5      	b.n	80046e6 <_printf_i+0x22e>
 80046fa:	bf00      	nop
 80046fc:	08004aa5 	.word	0x08004aa5
 8004700:	08004ab6 	.word	0x08004ab6

08004704 <memmove>:
 8004704:	4288      	cmp	r0, r1
 8004706:	b510      	push	{r4, lr}
 8004708:	eb01 0402 	add.w	r4, r1, r2
 800470c:	d902      	bls.n	8004714 <memmove+0x10>
 800470e:	4284      	cmp	r4, r0
 8004710:	4623      	mov	r3, r4
 8004712:	d807      	bhi.n	8004724 <memmove+0x20>
 8004714:	1e43      	subs	r3, r0, #1
 8004716:	42a1      	cmp	r1, r4
 8004718:	d008      	beq.n	800472c <memmove+0x28>
 800471a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800471e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004722:	e7f8      	b.n	8004716 <memmove+0x12>
 8004724:	4402      	add	r2, r0
 8004726:	4601      	mov	r1, r0
 8004728:	428a      	cmp	r2, r1
 800472a:	d100      	bne.n	800472e <memmove+0x2a>
 800472c:	bd10      	pop	{r4, pc}
 800472e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004736:	e7f7      	b.n	8004728 <memmove+0x24>

08004738 <_free_r>:
 8004738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800473a:	2900      	cmp	r1, #0
 800473c:	d044      	beq.n	80047c8 <_free_r+0x90>
 800473e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004742:	9001      	str	r0, [sp, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f1a1 0404 	sub.w	r4, r1, #4
 800474a:	bfb8      	it	lt
 800474c:	18e4      	addlt	r4, r4, r3
 800474e:	f000 f913 	bl	8004978 <__malloc_lock>
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <_free_r+0x94>)
 8004754:	9801      	ldr	r0, [sp, #4]
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x30>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	b003      	add	sp, #12
 8004760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004764:	f000 b90e 	b.w	8004984 <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x46>
 800476c:	6825      	ldr	r5, [r4, #0]
 800476e:	1961      	adds	r1, r4, r5
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1949      	addeq	r1, r1, r5
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x22>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x50>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x46>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1855      	adds	r5, r2, r1
 800478c:	42a5      	cmp	r5, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x70>
 8004790:	6824      	ldr	r4, [r4, #0]
 8004792:	4421      	add	r1, r4
 8004794:	1854      	adds	r4, r2, r1
 8004796:	42a3      	cmp	r3, r4
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x26>
 800479c:	681c      	ldr	r4, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	4421      	add	r1, r4
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	e7da      	b.n	800475e <_free_r+0x26>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x78>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6003      	str	r3, [r0, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x26>
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	1961      	adds	r1, r4, r5
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1949      	addeq	r1, r1, r5
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7ca      	b.n	800475e <_free_r+0x26>
 80047c8:	b003      	add	sp, #12
 80047ca:	bd30      	pop	{r4, r5, pc}
 80047cc:	20000324 	.word	0x20000324

080047d0 <sbrk_aligned>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	4e0e      	ldr	r6, [pc, #56]	; (800480c <sbrk_aligned+0x3c>)
 80047d4:	460c      	mov	r4, r1
 80047d6:	6831      	ldr	r1, [r6, #0]
 80047d8:	4605      	mov	r5, r0
 80047da:	b911      	cbnz	r1, 80047e2 <sbrk_aligned+0x12>
 80047dc:	f000 f8bc 	bl	8004958 <_sbrk_r>
 80047e0:	6030      	str	r0, [r6, #0]
 80047e2:	4621      	mov	r1, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f8b7 	bl	8004958 <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d00a      	beq.n	8004804 <sbrk_aligned+0x34>
 80047ee:	1cc4      	adds	r4, r0, #3
 80047f0:	f024 0403 	bic.w	r4, r4, #3
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	d007      	beq.n	8004808 <sbrk_aligned+0x38>
 80047f8:	1a21      	subs	r1, r4, r0
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 f8ac 	bl	8004958 <_sbrk_r>
 8004800:	3001      	adds	r0, #1
 8004802:	d101      	bne.n	8004808 <sbrk_aligned+0x38>
 8004804:	f04f 34ff 	mov.w	r4, #4294967295
 8004808:	4620      	mov	r0, r4
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	20000328 	.word	0x20000328

08004810 <_malloc_r>:
 8004810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004814:	1ccd      	adds	r5, r1, #3
 8004816:	f025 0503 	bic.w	r5, r5, #3
 800481a:	3508      	adds	r5, #8
 800481c:	2d0c      	cmp	r5, #12
 800481e:	bf38      	it	cc
 8004820:	250c      	movcc	r5, #12
 8004822:	2d00      	cmp	r5, #0
 8004824:	4607      	mov	r7, r0
 8004826:	db01      	blt.n	800482c <_malloc_r+0x1c>
 8004828:	42a9      	cmp	r1, r5
 800482a:	d905      	bls.n	8004838 <_malloc_r+0x28>
 800482c:	230c      	movs	r3, #12
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	2600      	movs	r6, #0
 8004832:	4630      	mov	r0, r6
 8004834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004838:	4e2e      	ldr	r6, [pc, #184]	; (80048f4 <_malloc_r+0xe4>)
 800483a:	f000 f89d 	bl	8004978 <__malloc_lock>
 800483e:	6833      	ldr	r3, [r6, #0]
 8004840:	461c      	mov	r4, r3
 8004842:	bb34      	cbnz	r4, 8004892 <_malloc_r+0x82>
 8004844:	4629      	mov	r1, r5
 8004846:	4638      	mov	r0, r7
 8004848:	f7ff ffc2 	bl	80047d0 <sbrk_aligned>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	4604      	mov	r4, r0
 8004850:	d14d      	bne.n	80048ee <_malloc_r+0xde>
 8004852:	6834      	ldr	r4, [r6, #0]
 8004854:	4626      	mov	r6, r4
 8004856:	2e00      	cmp	r6, #0
 8004858:	d140      	bne.n	80048dc <_malloc_r+0xcc>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	4631      	mov	r1, r6
 800485e:	4638      	mov	r0, r7
 8004860:	eb04 0803 	add.w	r8, r4, r3
 8004864:	f000 f878 	bl	8004958 <_sbrk_r>
 8004868:	4580      	cmp	r8, r0
 800486a:	d13a      	bne.n	80048e2 <_malloc_r+0xd2>
 800486c:	6821      	ldr	r1, [r4, #0]
 800486e:	3503      	adds	r5, #3
 8004870:	1a6d      	subs	r5, r5, r1
 8004872:	f025 0503 	bic.w	r5, r5, #3
 8004876:	3508      	adds	r5, #8
 8004878:	2d0c      	cmp	r5, #12
 800487a:	bf38      	it	cc
 800487c:	250c      	movcc	r5, #12
 800487e:	4629      	mov	r1, r5
 8004880:	4638      	mov	r0, r7
 8004882:	f7ff ffa5 	bl	80047d0 <sbrk_aligned>
 8004886:	3001      	adds	r0, #1
 8004888:	d02b      	beq.n	80048e2 <_malloc_r+0xd2>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	442b      	add	r3, r5
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	e00e      	b.n	80048b0 <_malloc_r+0xa0>
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	1b52      	subs	r2, r2, r5
 8004896:	d41e      	bmi.n	80048d6 <_malloc_r+0xc6>
 8004898:	2a0b      	cmp	r2, #11
 800489a:	d916      	bls.n	80048ca <_malloc_r+0xba>
 800489c:	1961      	adds	r1, r4, r5
 800489e:	42a3      	cmp	r3, r4
 80048a0:	6025      	str	r5, [r4, #0]
 80048a2:	bf18      	it	ne
 80048a4:	6059      	strne	r1, [r3, #4]
 80048a6:	6863      	ldr	r3, [r4, #4]
 80048a8:	bf08      	it	eq
 80048aa:	6031      	streq	r1, [r6, #0]
 80048ac:	5162      	str	r2, [r4, r5]
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	4638      	mov	r0, r7
 80048b2:	f104 060b 	add.w	r6, r4, #11
 80048b6:	f000 f865 	bl	8004984 <__malloc_unlock>
 80048ba:	f026 0607 	bic.w	r6, r6, #7
 80048be:	1d23      	adds	r3, r4, #4
 80048c0:	1af2      	subs	r2, r6, r3
 80048c2:	d0b6      	beq.n	8004832 <_malloc_r+0x22>
 80048c4:	1b9b      	subs	r3, r3, r6
 80048c6:	50a3      	str	r3, [r4, r2]
 80048c8:	e7b3      	b.n	8004832 <_malloc_r+0x22>
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	bf0c      	ite	eq
 80048d0:	6032      	streq	r2, [r6, #0]
 80048d2:	605a      	strne	r2, [r3, #4]
 80048d4:	e7ec      	b.n	80048b0 <_malloc_r+0xa0>
 80048d6:	4623      	mov	r3, r4
 80048d8:	6864      	ldr	r4, [r4, #4]
 80048da:	e7b2      	b.n	8004842 <_malloc_r+0x32>
 80048dc:	4634      	mov	r4, r6
 80048de:	6876      	ldr	r6, [r6, #4]
 80048e0:	e7b9      	b.n	8004856 <_malloc_r+0x46>
 80048e2:	230c      	movs	r3, #12
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4638      	mov	r0, r7
 80048e8:	f000 f84c 	bl	8004984 <__malloc_unlock>
 80048ec:	e7a1      	b.n	8004832 <_malloc_r+0x22>
 80048ee:	6025      	str	r5, [r4, #0]
 80048f0:	e7de      	b.n	80048b0 <_malloc_r+0xa0>
 80048f2:	bf00      	nop
 80048f4:	20000324 	.word	0x20000324

080048f8 <_realloc_r>:
 80048f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fc:	4680      	mov	r8, r0
 80048fe:	4614      	mov	r4, r2
 8004900:	460e      	mov	r6, r1
 8004902:	b921      	cbnz	r1, 800490e <_realloc_r+0x16>
 8004904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	4611      	mov	r1, r2
 800490a:	f7ff bf81 	b.w	8004810 <_malloc_r>
 800490e:	b92a      	cbnz	r2, 800491c <_realloc_r+0x24>
 8004910:	f7ff ff12 	bl	8004738 <_free_r>
 8004914:	4625      	mov	r5, r4
 8004916:	4628      	mov	r0, r5
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	f000 f838 	bl	8004990 <_malloc_usable_size_r>
 8004920:	4284      	cmp	r4, r0
 8004922:	4607      	mov	r7, r0
 8004924:	d802      	bhi.n	800492c <_realloc_r+0x34>
 8004926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800492a:	d812      	bhi.n	8004952 <_realloc_r+0x5a>
 800492c:	4621      	mov	r1, r4
 800492e:	4640      	mov	r0, r8
 8004930:	f7ff ff6e 	bl	8004810 <_malloc_r>
 8004934:	4605      	mov	r5, r0
 8004936:	2800      	cmp	r0, #0
 8004938:	d0ed      	beq.n	8004916 <_realloc_r+0x1e>
 800493a:	42bc      	cmp	r4, r7
 800493c:	4622      	mov	r2, r4
 800493e:	4631      	mov	r1, r6
 8004940:	bf28      	it	cs
 8004942:	463a      	movcs	r2, r7
 8004944:	f7ff fba4 	bl	8004090 <memcpy>
 8004948:	4631      	mov	r1, r6
 800494a:	4640      	mov	r0, r8
 800494c:	f7ff fef4 	bl	8004738 <_free_r>
 8004950:	e7e1      	b.n	8004916 <_realloc_r+0x1e>
 8004952:	4635      	mov	r5, r6
 8004954:	e7df      	b.n	8004916 <_realloc_r+0x1e>
	...

08004958 <_sbrk_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d06      	ldr	r5, [pc, #24]	; (8004974 <_sbrk_r+0x1c>)
 800495c:	2300      	movs	r3, #0
 800495e:	4604      	mov	r4, r0
 8004960:	4608      	mov	r0, r1
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	f7fb ffe2 	bl	800092c <_sbrk>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_sbrk_r+0x1a>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	b103      	cbz	r3, 8004972 <_sbrk_r+0x1a>
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	2000032c 	.word	0x2000032c

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <__malloc_lock+0x8>)
 800497a:	f000 b811 	b.w	80049a0 <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	20000330 	.word	0x20000330

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__malloc_unlock+0x8>)
 8004986:	f000 b80c 	b.w	80049a2 <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	20000330 	.word	0x20000330

08004990 <_malloc_usable_size_r>:
 8004990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004994:	1f18      	subs	r0, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfbc      	itt	lt
 800499a:	580b      	ldrlt	r3, [r1, r0]
 800499c:	18c0      	addlt	r0, r0, r3
 800499e:	4770      	bx	lr

080049a0 <__retarget_lock_acquire_recursive>:
 80049a0:	4770      	bx	lr

080049a2 <__retarget_lock_release_recursive>:
 80049a2:	4770      	bx	lr

080049a4 <_init>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr

080049b0 <_fini>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

Disassembly of section .code_section_1:

08019000 <uart_interupt_service>:
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b082      	sub	sp, #8
 8019004:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8019006:	2120      	movs	r1, #32
 8019008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801900c:	f7e8 f962 	bl	80012d4 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(HUART_HANDLE, &rx_buff[rx_byte_count], 1, 10);
 8019010:	4b30      	ldr	r3, [pc, #192]	; (80190d4 <uart_interupt_service+0xd4>)
 8019012:	781b      	ldrb	r3, [r3, #0]
 8019014:	461a      	mov	r2, r3
 8019016:	4b30      	ldr	r3, [pc, #192]	; (80190d8 <uart_interupt_service+0xd8>)
 8019018:	18d1      	adds	r1, r2, r3
 801901a:	230a      	movs	r3, #10
 801901c:	2201      	movs	r2, #1
 801901e:	482f      	ldr	r0, [pc, #188]	; (80190dc <uart_interupt_service+0xdc>)
 8019020:	f7e9 fce0 	bl	80029e4 <HAL_UART_Transmit>
	rx_byte_count++;
 8019024:	4b2b      	ldr	r3, [pc, #172]	; (80190d4 <uart_interupt_service+0xd4>)
 8019026:	781b      	ldrb	r3, [r3, #0]
 8019028:	3301      	adds	r3, #1
 801902a:	b2da      	uxtb	r2, r3
 801902c:	4b29      	ldr	r3, [pc, #164]	; (80190d4 <uart_interupt_service+0xd4>)
 801902e:	701a      	strb	r2, [r3, #0]
	switch(rx_buff[rx_byte_count-1]){
 8019030:	4b28      	ldr	r3, [pc, #160]	; (80190d4 <uart_interupt_service+0xd4>)
 8019032:	781b      	ldrb	r3, [r3, #0]
 8019034:	3b01      	subs	r3, #1
 8019036:	4a28      	ldr	r2, [pc, #160]	; (80190d8 <uart_interupt_service+0xd8>)
 8019038:	5cd3      	ldrb	r3, [r2, r3]
 801903a:	2b08      	cmp	r3, #8
 801903c:	d014      	beq.n	8019068 <uart_interupt_service+0x68>
 801903e:	2b0d      	cmp	r3, #13
 8019040:	d138      	bne.n	80190b4 <uart_interupt_service+0xb4>
			stop_char_flag = 1;
 8019042:	4b27      	ldr	r3, [pc, #156]	; (80190e0 <uart_interupt_service+0xe0>)
 8019044:	2201      	movs	r2, #1
 8019046:	701a      	strb	r2, [r3, #0]
			uint8_t len = snprintf((char*)tx_buff,UART_BUFF_LEN,"\r\n");
 8019048:	4a26      	ldr	r2, [pc, #152]	; (80190e4 <uart_interupt_service+0xe4>)
 801904a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801904e:	4826      	ldr	r0, [pc, #152]	; (80190e8 <uart_interupt_service+0xe8>)
 8019050:	f7eb f834 	bl	80040bc <sniprintf>
 8019054:	4603      	mov	r3, r0
 8019056:	71fb      	strb	r3, [r7, #7]
			HAL_UART_Transmit(HUART_HANDLE, (uint8_t *)&tx_buff, len, 10);
 8019058:	79fb      	ldrb	r3, [r7, #7]
 801905a:	b29a      	uxth	r2, r3
 801905c:	230a      	movs	r3, #10
 801905e:	4922      	ldr	r1, [pc, #136]	; (80190e8 <uart_interupt_service+0xe8>)
 8019060:	481e      	ldr	r0, [pc, #120]	; (80190dc <uart_interupt_service+0xdc>)
 8019062:	f7e9 fcbf 	bl	80029e4 <HAL_UART_Transmit>
			break;
 8019066:	e030      	b.n	80190ca <uart_interupt_service+0xca>
			uint8_t len = snprintf((char*)tx_buff,UART_BUFF_LEN," ");
 8019068:	4a20      	ldr	r2, [pc, #128]	; (80190ec <uart_interupt_service+0xec>)
 801906a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801906e:	481e      	ldr	r0, [pc, #120]	; (80190e8 <uart_interupt_service+0xe8>)
 8019070:	f7eb f824 	bl	80040bc <sniprintf>
 8019074:	4603      	mov	r3, r0
 8019076:	71bb      	strb	r3, [r7, #6]
			tx_buff[len] = backspace;
 8019078:	79bb      	ldrb	r3, [r7, #6]
 801907a:	4a1b      	ldr	r2, [pc, #108]	; (80190e8 <uart_interupt_service+0xe8>)
 801907c:	2108      	movs	r1, #8
 801907e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(HUART_HANDLE, (uint8_t *)&tx_buff, len+1, 10);
 8019080:	79bb      	ldrb	r3, [r7, #6]
 8019082:	b29b      	uxth	r3, r3
 8019084:	3301      	adds	r3, #1
 8019086:	b29a      	uxth	r2, r3
 8019088:	230a      	movs	r3, #10
 801908a:	4917      	ldr	r1, [pc, #92]	; (80190e8 <uart_interupt_service+0xe8>)
 801908c:	4813      	ldr	r0, [pc, #76]	; (80190dc <uart_interupt_service+0xdc>)
 801908e:	f7e9 fca9 	bl	80029e4 <HAL_UART_Transmit>
			rx_byte_count-=2;
 8019092:	4b10      	ldr	r3, [pc, #64]	; (80190d4 <uart_interupt_service+0xd4>)
 8019094:	781b      	ldrb	r3, [r3, #0]
 8019096:	3b02      	subs	r3, #2
 8019098:	b2da      	uxtb	r2, r3
 801909a:	4b0e      	ldr	r3, [pc, #56]	; (80190d4 <uart_interupt_service+0xd4>)
 801909c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(HUART_HANDLE, &rx_buff[rx_byte_count], 1);
 801909e:	4b0d      	ldr	r3, [pc, #52]	; (80190d4 <uart_interupt_service+0xd4>)
 80190a0:	781b      	ldrb	r3, [r3, #0]
 80190a2:	461a      	mov	r2, r3
 80190a4:	4b0c      	ldr	r3, [pc, #48]	; (80190d8 <uart_interupt_service+0xd8>)
 80190a6:	4413      	add	r3, r2
 80190a8:	2201      	movs	r2, #1
 80190aa:	4619      	mov	r1, r3
 80190ac:	480b      	ldr	r0, [pc, #44]	; (80190dc <uart_interupt_service+0xdc>)
 80190ae:	f7e9 fd2d 	bl	8002b0c <HAL_UART_Receive_IT>
			break;
 80190b2:	e00a      	b.n	80190ca <uart_interupt_service+0xca>
			HAL_UART_Receive_IT(HUART_HANDLE, &rx_buff[rx_byte_count], 1);
 80190b4:	4b07      	ldr	r3, [pc, #28]	; (80190d4 <uart_interupt_service+0xd4>)
 80190b6:	781b      	ldrb	r3, [r3, #0]
 80190b8:	461a      	mov	r2, r3
 80190ba:	4b07      	ldr	r3, [pc, #28]	; (80190d8 <uart_interupt_service+0xd8>)
 80190bc:	4413      	add	r3, r2
 80190be:	2201      	movs	r2, #1
 80190c0:	4619      	mov	r1, r3
 80190c2:	4806      	ldr	r0, [pc, #24]	; (80190dc <uart_interupt_service+0xdc>)
 80190c4:	f7e9 fd22 	bl	8002b0c <HAL_UART_Receive_IT>
			break;
 80190c8:	bf00      	nop
}
 80190ca:	bf00      	nop
 80190cc:	3708      	adds	r7, #8
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}
 80190d2:	bf00      	nop
 80190d4:	20000294 	.word	0x20000294
 80190d8:	20000194 	.word	0x20000194
 80190dc:	2000029c 	.word	0x2000029c
 80190e0:	20000295 	.word	0x20000295
 80190e4:	080049bc 	.word	0x080049bc
 80190e8:	20000000 	.word	0x20000000
 80190ec:	080049c0 	.word	0x080049c0

Disassembly of section .code_section_2:

080190f0 <handle_stop_char>:
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
	if(stop_char_flag){
 80190f6:	4b25      	ldr	r3, [pc, #148]	; (801918c <handle_stop_char+0x9c>)
 80190f8:	781b      	ldrb	r3, [r3, #0]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d040      	beq.n	8019180 <handle_stop_char+0x90>
	  uint8_t len = snprintf((char*)&tx_buff,UART_BUFF_LEN,">>>> ");
 80190fe:	4a24      	ldr	r2, [pc, #144]	; (8019190 <handle_stop_char+0xa0>)
 8019100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019104:	4823      	ldr	r0, [pc, #140]	; (8019194 <handle_stop_char+0xa4>)
 8019106:	f7ea ffd9 	bl	80040bc <sniprintf>
 801910a:	4603      	mov	r3, r0
 801910c:	71fb      	strb	r3, [r7, #7]
	  memcpy(&tx_buff[len],rx_buff,rx_byte_count);
 801910e:	79fb      	ldrb	r3, [r7, #7]
 8019110:	4a20      	ldr	r2, [pc, #128]	; (8019194 <handle_stop_char+0xa4>)
 8019112:	4413      	add	r3, r2
 8019114:	4a20      	ldr	r2, [pc, #128]	; (8019198 <handle_stop_char+0xa8>)
 8019116:	7812      	ldrb	r2, [r2, #0]
 8019118:	4920      	ldr	r1, [pc, #128]	; (801919c <handle_stop_char+0xac>)
 801911a:	4618      	mov	r0, r3
 801911c:	f7ea ffb8 	bl	8004090 <memcpy>
	  len += snprintf((char*)&tx_buff[rx_byte_count+len],UART_BUFF_LEN,"\r\n\n$ ");
 8019120:	4b1d      	ldr	r3, [pc, #116]	; (8019198 <handle_stop_char+0xa8>)
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	461a      	mov	r2, r3
 8019126:	79fb      	ldrb	r3, [r7, #7]
 8019128:	4413      	add	r3, r2
 801912a:	4a1a      	ldr	r2, [pc, #104]	; (8019194 <handle_stop_char+0xa4>)
 801912c:	4413      	add	r3, r2
 801912e:	4a1c      	ldr	r2, [pc, #112]	; (80191a0 <handle_stop_char+0xb0>)
 8019130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019134:	4618      	mov	r0, r3
 8019136:	f7ea ffc1 	bl	80040bc <sniprintf>
 801913a:	4603      	mov	r3, r0
 801913c:	b2da      	uxtb	r2, r3
 801913e:	79fb      	ldrb	r3, [r7, #7]
 8019140:	4413      	add	r3, r2
 8019142:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, (uint8_t *)&tx_buff, rx_byte_count+len, 10);
 8019144:	4b14      	ldr	r3, [pc, #80]	; (8019198 <handle_stop_char+0xa8>)
 8019146:	781b      	ldrb	r3, [r3, #0]
 8019148:	b29a      	uxth	r2, r3
 801914a:	79fb      	ldrb	r3, [r7, #7]
 801914c:	b29b      	uxth	r3, r3
 801914e:	4413      	add	r3, r2
 8019150:	b29a      	uxth	r2, r3
 8019152:	230a      	movs	r3, #10
 8019154:	490f      	ldr	r1, [pc, #60]	; (8019194 <handle_stop_char+0xa4>)
 8019156:	4813      	ldr	r0, [pc, #76]	; (80191a4 <handle_stop_char+0xb4>)
 8019158:	f7e9 fc44 	bl	80029e4 <HAL_UART_Transmit>
	  stop_char_flag = 0;
 801915c:	4b0b      	ldr	r3, [pc, #44]	; (801918c <handle_stop_char+0x9c>)
 801915e:	2200      	movs	r2, #0
 8019160:	701a      	strb	r2, [r3, #0]
	  rx_byte_count = 0;
 8019162:	4b0d      	ldr	r3, [pc, #52]	; (8019198 <handle_stop_char+0xa8>)
 8019164:	2200      	movs	r2, #0
 8019166:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, &rx_buff[rx_byte_count], 1);
 8019168:	4b0b      	ldr	r3, [pc, #44]	; (8019198 <handle_stop_char+0xa8>)
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	461a      	mov	r2, r3
 801916e:	4b0b      	ldr	r3, [pc, #44]	; (801919c <handle_stop_char+0xac>)
 8019170:	4413      	add	r3, r2
 8019172:	2201      	movs	r2, #1
 8019174:	4619      	mov	r1, r3
 8019176:	480b      	ldr	r0, [pc, #44]	; (80191a4 <handle_stop_char+0xb4>)
 8019178:	f7e9 fcc8 	bl	8002b0c <HAL_UART_Receive_IT>
	  return true;
 801917c:	2301      	movs	r3, #1
 801917e:	e000      	b.n	8019182 <handle_stop_char+0x92>
	return false;
 8019180:	2300      	movs	r3, #0
}
 8019182:	4618      	mov	r0, r3
 8019184:	3708      	adds	r7, #8
 8019186:	46bd      	mov	sp, r7
 8019188:	bd80      	pop	{r7, pc}
 801918a:	bf00      	nop
 801918c:	20000295 	.word	0x20000295
 8019190:	080049c4 	.word	0x080049c4
 8019194:	20000000 	.word	0x20000000
 8019198:	20000294 	.word	0x20000294
 801919c:	20000194 	.word	0x20000194
 80191a0:	080049cc 	.word	0x080049cc
 80191a4:	2000029c 	.word	0x2000029c
